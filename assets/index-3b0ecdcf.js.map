{"version":3,"mappings":"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","names":["m","require$$0","createRoot","FUNC_ERROR_TEXT","NAN","symbolTag","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","freeGlobal","freeSelf","root","objectProto","objectToString","nativeMax","nativeMin","now","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","toNumber","isObject","invokeFunc","time","args","thisArg","leadingEdge","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","shouldInvoke","trailingEdge","cancel","flush","debounced","isInvoking","value","type","isObjectLike","isSymbol","other","isBinary","lodash_debounce","getRandomValues","rnds8","rng","REGEX","validate","uuid","byteToHex","i","stringify","arr","offset","v4","buf","rnds","DEVICE_STORAGE_KEY","CURRENT_DEVICE_KEY","MAX_DEVICES","getStoredDevices","data","devices","devicesMap","device","error","saveDevices","devicesList","a","b","limitedDevices","detectBrowser","userAgent","browser","os","deviceType","getOrCreateDeviceId","deviceId","nanoid","initializeCurrentDevice","id","currentDevice","existingDevice","getCurrentDevice","stored","updateCurrentDevice","updates","updatedDevice","updateCurrentDeviceLocation","location","getDevice","getAllDevices","setDeviceTrusted","trusted","isDeviceTrusted","removeDevice","removed","removeAllOtherDevices","currentDeviceId","removedCount","renameDevice","name","initialize","deviceManager","AuthEventType","lastEvents","trackAuthEvent","eventType","timestamp","eventKey","lastEvent","event","events","getStoredEvents","saveEvents","trackSuspiciousActivity","userId","activityType","metadata","ANALYTICS_STORAGE_KEY","storedData","err","trimmedEvents","simulateApiCall","delay","resolve","Z_FIXED$1","Z_BINARY","Z_TEXT","Z_UNKNOWN$1","zero$1","len","STORED_BLOCK","STATIC_TREES","DYN_TREES","MIN_MATCH$1","MAX_MATCH$1","LENGTH_CODES$1","LITERALS$1","L_CODES$1","D_CODES$1","BL_CODES$1","HEAP_SIZE$1","MAX_BITS$1","Buf_size","MAX_BL_BITS","END_BLOCK","REP_3_6","REPZ_3_10","REPZ_11_138","extra_lbits","extra_dbits","extra_blbits","bl_order","DIST_CODE_LEN","static_ltree","static_dtree","_dist_code","_length_code","base_length","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","static_l_desc","static_d_desc","static_bl_desc","TreeDesc","dyn_tree","stat_desc","d_code","dist","put_short","s","w","send_bits","length","send_code","c","tree","bi_reverse","code","res","bi_flush","gen_bitlen","desc","max_code","stree","has_stree","extra","base","h","n","bits","xbits","f","overflow","gen_codes","bl_count","next_code","tr_static_init","init_block","bi_windup","smaller","depth","_n2","_m2","pqdownheap","k","v","j","compress_block","ltree","dtree","lc","sx","build_tree","node","scan_tree","prevlen","curlen","nextlen","count","max_count","min_count","send_tree","build_bl_tree","max_blindex","send_all_trees","lcodes","dcodes","blcodes","rank","detect_data_type","block_mask","static_init_done","_tr_init$1","_tr_stored_block$1","stored_len","last","_tr_align$1","_tr_flush_block$1","opt_lenb","static_lenb","_tr_tally$1","_tr_init_1","_tr_stored_block_1","_tr_flush_block_1","_tr_tally_1","_tr_align_1","trees","adler32","adler","pos","s1","s2","adler32_1","makeTable","table","crcTable","crc32","crc","t","end","crc32_1","messages","constants$2","_tr_init","_tr_stored_block","_tr_flush_block","_tr_tally","_tr_align","Z_NO_FLUSH$2","Z_PARTIAL_FLUSH","Z_FULL_FLUSH$1","Z_FINISH$3","Z_BLOCK$1","Z_OK$3","Z_STREAM_END$3","Z_STREAM_ERROR$2","Z_DATA_ERROR$2","Z_BUF_ERROR$1","Z_DEFAULT_COMPRESSION$1","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY$1","Z_UNKNOWN","Z_DEFLATED$2","MAX_MEM_LEVEL","MAX_WBITS$1","DEF_MEM_LEVEL","LENGTH_CODES","LITERALS","L_CODES","D_CODES","BL_CODES","HEAP_SIZE","MAX_BITS","MIN_MATCH","MAX_MATCH","MIN_LOOKAHEAD","PRESET_DICT","INIT_STATE","GZIP_STATE","EXTRA_STATE","NAME_STATE","COMMENT_STATE","HCRC_STATE","BUSY_STATE","FINISH_STATE","BS_NEED_MORE","BS_BLOCK_DONE","BS_FINISH_STARTED","BS_FINISH_DONE","OS_CODE","strm","errorCode","zero","slide_hash","p","wsize","HASH_ZLIB","prev","HASH","flush_pending","flush_block_only","put_byte","putShortMSB","read_buf","start","size","longest_match","cur_match","chain_length","scan","match","best_len","nice_match","limit","_win","wmask","strend","scan_end1","scan_end","fill_window","_w_size","more","str","deflate_stored","min_block","left","have","used","deflate_fast","hash_head","bflush","deflate_slow","max_insert","deflate_rle","deflate_huff","Config","good_length","max_lazy","nice_length","max_chain","configuration_table","lm_init","DeflateState","deflateStateCheck","deflateResetKeep","deflateReset","ret","deflateSetHeader","head","deflateInit2","level","method","windowBits","memLevel","strategy","wrap","deflateInit","deflate$2","old_flush","header","level_flags","beg","copy","gzhead_extra","val","bstate","deflateEnd","status","deflateSetDictionary","dictionary","dictLength","tmpDict","avail","next","input","deflateInit_1","deflateInit2_1","deflateReset_1","deflateResetKeep_1","deflateSetHeader_1","deflate_2$1","deflateEnd_1","deflateSetDictionary_1","deflateInfo","deflate_1$2","_has","obj","key","assign","sources","source","flattenChunks","chunks","l","chunk","common","STR_APPLY_UIA_OK","_utf8len","q","string2buf","c2","m_pos","str_len","buf_len","buf2binstring","buf2string","max","out","utf16buf","c_len","utf8border","strings","ZStream","zstream","toString$1","Z_NO_FLUSH$1","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH$2","Z_OK$2","Z_STREAM_END$2","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED$1","Deflate$1","opt","dict","flush_mode","chunkSize","_flush_mode","deflate$1","deflator","deflateRaw$1","gzip$1","Deflate_1$1","deflate_2","deflateRaw_1$1","gzip_1$1","constants$1","deflate_1$1","BAD$1","TYPE$1","inffast","_in","_out","dmax","whave","wnext","s_window","hold","lcode","dcode","lmask","dmask","here","op","from","from_source","output","state","top","dolen","dodist","MAXBITS","ENOUGH_LENS$1","ENOUGH_DISTS$1","CODES$1","LENS$1","DISTS$1","lbase","lext","dbase","dext","inflate_table","lens","lens_index","codes","table_index","work","opts","sym","min","curr","drop","huff","incr","fill","low","mask","offs","here_bits","here_op","here_val","inftrees","CODES","LENS","DISTS","Z_FINISH$1","Z_BLOCK","Z_TREES","Z_OK$1","Z_STREAM_END$1","Z_NEED_DICT$1","Z_STREAM_ERROR$1","Z_DATA_ERROR$1","Z_MEM_ERROR$1","Z_BUF_ERROR","Z_DEFLATED","HEAD","FLAGS","TIME","OS","EXLEN","EXTRA","NAME","COMMENT","HCRC","DICTID","DICT","TYPE","TYPEDO","STORED","COPY_","COPY","TABLE","LENLENS","CODELENS","LEN_","LEN","LENEXT","DIST","DISTEXT","MATCH","LIT","CHECK","LENGTH","DONE","BAD","MEM","SYNC","ENOUGH_LENS","ENOUGH_DISTS","MAX_WBITS","DEF_WBITS","zswap32","InflateState","inflateStateCheck","inflateResetKeep","inflateReset","inflateReset2","inflateInit2","inflateInit","virgin","lenfix","distfix","fixedtables","updatewindow","src","inflate$2","put","last_bits","last_op","last_val","hbuf","order","inf_leave","inflateEnd","inflateGetHeader","inflateSetDictionary","dictid","inflateReset_1","inflateReset2_1","inflateResetKeep_1","inflateInit_1","inflateInit2_1","inflate_2$1","inflateEnd_1","inflateGetHeader_1","inflateSetDictionary_1","inflateInfo","inflate_1$2","GZheader","gzheader","toString","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Inflate$1","last_avail_out","next_out_utf8","tail","utf8str","inflate$1","inflator","inflateRaw$1","Inflate_1$1","inflate_2","inflateRaw_1$1","ungzip$1","constants","inflate_1$1","Deflate","deflate","deflateRaw","gzip","Inflate","inflate","inflateRaw","ungzip","deflate_1","inflate_1","compressData","uint8Array","compressed","pako.deflate","arrayBufferToBase64","decompressData","compressedData","arrayBuffer","base64ToArrayBuffer","decompressed","pako.inflate","buffer","bytes","binary","base64","binaryString","DEFAULT_PASSWORD_POLICY","COMMON_PASSWORDS","validatePassword","password","policy","hasUppercase","getPasswordStrengthLevel","hasLowercase","hasNumbers","hasSpecialChars","hasSequentialChars","hasRepeatedChars","score","varietyCount","sequences","lowerPassword","seq","triplet","ENCRYPTION_KEY","DB_STORAGE_KEY","LOGS_STORAGE_KEY","userEmailIndex","currentUserCache","databaseLoaded","DEFAULT_ADMIN_EMAIL","DEFAULT_ADMIN_PASSWORD","initialDatabase","encrypt","CryptoJS","decrypt","encryptedData","decryptedString","decompressedString","encryptData","decryptData","rebuildIndexes","db","user","u","getDatabase","encryptedDb","newDb","adminEmail","hash","salt","hashPassword","adminUser","saveDatabase","decryptedDb","decryptError","needsRepair","adminId","verifyPassword","storedHash","loadLogs","encryptedLogs","decryptedLogs","saveLogs","logs","getCurrentUser","logToSystem","action","details","currentUser","logEntry","MAX_LOGS","isAdminEmail","email","createUser","emailLower","existingUser","isAdmin","newUser","authenticateUser","newAdminUser","getUserByEmail","getAllUsers","logoutUser","logAction","getAllLogs","page","getLogCount","exportDatabase","sanitizedDb","importDatabase","jsonData","importedDb","currentDb","existingIds","existingEmails","newUsers","importedUser","saved","makeUserAdmin","userIndex","enableMFA","secret","recoveryCodes","log","disableMFA","changePassword","currentPassword","newPassword","passwordValidation","historyEntry","getDatabaseStats","initializeDatabase","addAuditLog","newLog","getAuditLogs","total","updateUser","userData","deleteUser","deleteAllAccounts","freshDb","success","ensureAdminAccess","repairDatabase","wasRepaired","indexedId","defaultSystemSettings","SYSTEM_SETTINGS_KEY","getSystemSettings","storedSettings","saveSystemSettings","settings","isFeatureEnabled","feature","checkMfaRequired","AuthContext","createContext","SESSION_DURATION","AuthProvider","children","setUser","useState","loading","setLoading","setError","sessionExpiry","setSessionExpiry","userRef","useRef","sessionExpiryRef","useEffect","logout","useCallback","storedSessionExpiry","storedUser","expiryTime","e","checkExpiry","currentExpiry","interval","login","userRecord","authUser","convertUserRecord","errorMessage","register","updatedRecord","updateUserInDb","dbUserData","updatedUserRecord","updatedUser","refreshUser","currentUserRecord","sendPasswordRecoveryEmail","token","resetPassword","verifyResetToken","confirmPasswordReset","startPasswordlessLogin","verifyPasswordlessCode","uuidv4","expiry","getSSOProviders","initiateSSOLogin","providerId","__vitePreload","redirectUrl","mockData","handleSSOCallback","database","mockUser","demoPassword","getSessionTimeRemaining","remaining","extendSession","authContextValue","useAuth","useContext","SpinnerContainer","styled","Spinner","Text","FullPageContainer","props","LoadingSpinner","React","message","fullPage","jsx","UserIcon","LogIcon","SettingsIcon","VirtualizedUserList","users","height","width","onActionClick","openDropdownId","toggleDropdown","jsxs","DashboardContainer","Title","TabsContainer","TabButton","Container","Button","ExportButton","PaginationControls","PageInfo","SearchBox","InfoPanel","StatCard","StatValue","StatLabel","LogLevel","LoadingContainer","ResponsiveContainer","LogTable","formatTimestamp","AdminDashboard","activeTab","setActiveTab","setUsers","setLogs","filteredUsers","setFilteredUsers","searchTerm","setSearchTerm","currentLogPage","setCurrentLogPage","currentUserPage","setCurrentUserPage","totalLogs","setTotalLogs","totalUsers","setTotalUsers","isLoadingUsers","setIsLoadingUsers","isLoadingLogs","setIsLoadingLogs","isExporting","setIsExporting","exportingLogs","setExportingLogs","tableWidth","setTableWidth","isDashboardLoading","setIsDashboardLoading","tableRef","levelFilter","setLevelFilter","logsPerPage","setLogsPerPage","exportError","setExportError","exportResult","setExportResult","systemSettings","setSystemSettings","settingsSaved","setSettingsSaved","setOpenDropdownId","usersPerPage","isMounted","handleUserAction","userToToggle","newStatus","handleClickOutside","applySystemSettings","filteredUsersList","useMemo","lowerSearch","getFilteredLogs","matchesSearch","matchesLevel","filteredLogs","paginatedLogs","startIndex","statsAdmin","statsMfaEnabled","loadedSettings","allUsers","logCount","logsPage","loadUsers","updateWidth","debouncedUpdateWidth","debouncedSearch","term","tab","lowerTerm","filtered","handleSearch","refreshLogs","handleExport","exportUsersToPdf","exportAuditLogsToPdf","downloadPdf","pdfBlob","filename","logsToExport","handleRefresh","paginatedUsers","handlePageChange","newPage","handleExportLogs","renderStats","saveSettings","updateSetting","toggleSetting","setting","updateNumericSetting","resetSettings","useAuthContext","context","SSOProviderType","getProviderIcon","provider","getProviderColor","lowerName","SSOLoginButton","onClick","providerColor","icon","SSOProviders","auth","useNavigate","isLoading","setIsLoading","isAuthenticating","setIsAuthenticating","providers","setProviders","activeProvider","setActiveProvider","availableProviders","handleSSOLogin","AuthFormSwitcher","initialMode","mode","setMode","setEmail","setPassword","confirmPassword","setConfirmPassword","showPasswordless","setShowPasswordless","showSSO","setShowSSO","showAdminLogin","setShowAdminLogin","navigate","handleKeyDown","toggleAuthMode","validateForm","handleSubmit","useAdminEmail","togglePasswordless","toggleSSO","Link","Dashboard","Footer","ForgotPassword","successMessage","setSuccessMessage","Fragment","Header","NotFound","ProtectedRoute","requireAdmin","authLoading","useLocation","timer","Navigate","App","Router","Routes","Route","defineGlobalProperty","hasRendered","rootElement","logPerformanceMetrics","navigationTiming","preconnectUrls","url","link","removeLoadingScreen","rootLoading","initApp","StrictMode"],"sources":["../../node_modules/react-dom/client.js","../../node_modules/lodash.debounce/index.js","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/regex.js","../../node_modules/uuid/dist/esm-browser/validate.js","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/utils/device/deviceManager.ts","../../src/utils/analytics/authAnalytics.ts","../../src/utils/api/apiUtils.ts","../../node_modules/pako/dist/pako.esm.mjs","../../src/utils/compression.ts","../../src/utils/passwordPolicy.ts","../../src/utils/database.ts","../../src/utils/auth.ts","../../src/contexts/AuthContext.tsx","../../src/components/LoadingSpinner.tsx","../../src/components/AdminDashboard.tsx","../../src/hooks/useAuthContext.ts","../../src/utils/sso/ssoProvider.ts","../../src/components/sso/SSOLoginButton.tsx","../../src/components/sso/SSOProviders.tsx","../../src/components/AuthFormSwitcher.tsx","../../src/components/Dashboard.tsx","../../src/components/Footer.tsx","../../src/components/ForgotPassword.tsx","../../src/components/Header.tsx","../../src/components/NotFound.tsx","../../src/components/ProtectedRoute.tsx","../../src/App.tsx","../../src/internals/define-globalThis-property.js","../../src/main.tsx"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { nanoid } from \"nanoid\";\n\nexport interface DeviceInfo {\n  id: string;\n  name?: string;\n  browser: string;\n  os: string;\n  deviceType: string;\n  ip?: string;\n  location?: string;\n  trusted: boolean;\n  lastSeen: number;\n  firstSeen: number;\n}\n\n// Local storage key for devices\nconst DEVICE_STORAGE_KEY = \"enterprise_auth_devices\";\nconst CURRENT_DEVICE_KEY = \"enterprise_auth_current_device\";\n\n// Maximum number of devices to remember\nconst MAX_DEVICES = 10;\n\n/**\n * Get stored devices from local storage\n * @returns Map of stored devices by ID\n */\nconst getStoredDevices = (): Map<string, DeviceInfo> => {\n  try {\n    const data = localStorage.getItem(DEVICE_STORAGE_KEY);\n    if (!data) return new Map();\n\n    const devices: DeviceInfo[] = JSON.parse(data);\n    const devicesMap = new Map<string, DeviceInfo>();\n\n    for (const device of devices) {\n      devicesMap.set(device.id, device);\n    }\n\n    return devicesMap;\n  } catch (error) {\n    console.error(\"Error loading devices:\", error);\n    return new Map();\n  }\n};\n\n/**\n * Save devices to local storage\n * @param devices Map of devices to save\n */\nconst saveDevices = (devices: Map<string, DeviceInfo>): void => {\n  try {\n    const devicesList = Array.from(devices.values());\n\n    // Sort by last seen date (most recent first)\n    devicesList.sort((a, b) => b.lastSeen - a.lastSeen);\n\n    // Limit to maximum number of devices\n    const limitedDevices = devicesList.slice(0, MAX_DEVICES);\n\n    localStorage.setItem(DEVICE_STORAGE_KEY, JSON.stringify(limitedDevices));\n  } catch (error) {\n    console.error(\"Error saving devices:\", error);\n  }\n};\n\n/**\n * Detect current browser information\n * @returns Browser and OS information\n */\nconst detectBrowser = (): {\n  browser: string;\n  os: string;\n  deviceType: string;\n} => {\n  const userAgent = navigator.userAgent;\n\n  // Detect browser\n  let browser = \"Unknown\";\n  if (userAgent.indexOf(\"Chrome\") > -1) browser = \"Chrome\";\n  else if (userAgent.indexOf(\"Safari\") > -1) browser = \"Safari\";\n  else if (userAgent.indexOf(\"Firefox\") > -1) browser = \"Firefox\";\n  else if (userAgent.indexOf(\"MSIE\") > -1 || userAgent.indexOf(\"Trident/\") > -1)\n    browser = \"Internet Explorer\";\n  else if (userAgent.indexOf(\"Edge\") > -1) browser = \"Edge\";\n\n  // Detect OS\n  let os = \"Unknown\";\n  if (userAgent.indexOf(\"Windows\") > -1) os = \"Windows\";\n  else if (userAgent.indexOf(\"Mac\") > -1) os = \"macOS\";\n  else if (userAgent.indexOf(\"Linux\") > -1) os = \"Linux\";\n  else if (userAgent.indexOf(\"Android\") > -1) os = \"Android\";\n  else if (userAgent.indexOf(\"iPhone\") > -1 || userAgent.indexOf(\"iPad\") > -1)\n    os = \"iOS\";\n\n  // Detect device type\n  let deviceType = \"Desktop\";\n  if (userAgent.indexOf(\"Mobi\") > -1) deviceType = \"Mobile\";\n  else if (userAgent.indexOf(\"Tablet\") > -1 || userAgent.indexOf(\"iPad\") > -1)\n    deviceType = \"Tablet\";\n\n  return { browser, os, deviceType };\n};\n\n/**\n * Get or create a unique identifier for the current device\n * @returns Device ID\n */\nconst getOrCreateDeviceId = (): string => {\n  let deviceId = localStorage.getItem(\"device_id\");\n\n  if (!deviceId) {\n    deviceId = nanoid();\n    localStorage.setItem(\"device_id\", deviceId);\n  }\n\n  return deviceId;\n};\n\n/**\n * Initialize current device\n * @returns Current device info\n */\nconst initializeCurrentDevice = (): DeviceInfo => {\n  const { browser, os, deviceType } = detectBrowser();\n  const now = Date.now();\n  const id = getOrCreateDeviceId();\n\n  const currentDevice: DeviceInfo = {\n    id,\n    browser,\n    os,\n    deviceType,\n    trusted: false,\n    lastSeen: now,\n    firstSeen: now,\n    location: \"Unknown Location\", // In a real app, this would be detected or provided by the user\n  };\n\n  // Save to local storage\n  localStorage.setItem(CURRENT_DEVICE_KEY, JSON.stringify(currentDevice));\n\n  // Add to devices list\n  const devices = getStoredDevices();\n\n  if (devices.has(id)) {\n    // Update existing device\n    const existingDevice = devices.get(id)!;\n    existingDevice.lastSeen = now;\n    existingDevice.browser = browser;\n    existingDevice.os = os;\n    existingDevice.deviceType = deviceType;\n    devices.set(id, existingDevice);\n  } else {\n    // Add new device\n    devices.set(id, currentDevice);\n  }\n\n  saveDevices(devices);\n\n  return currentDevice;\n};\n\n/**\n * Get the current device\n * @returns Current device info\n */\nconst getCurrentDevice = (): DeviceInfo => {\n  try {\n    const stored = localStorage.getItem(CURRENT_DEVICE_KEY);\n\n    if (stored) {\n      const device: DeviceInfo = JSON.parse(stored);\n\n      // Update last seen time\n      device.lastSeen = Date.now();\n      localStorage.setItem(CURRENT_DEVICE_KEY, JSON.stringify(device));\n\n      return device;\n    }\n\n    // Initialize if not found\n    return initializeCurrentDevice();\n  } catch (error) {\n    console.error(\"Error getting current device:\", error);\n    return initializeCurrentDevice();\n  }\n};\n\n/**\n * Update the current device information\n * @param updates Updates to apply to the device\n * @returns Updated device info\n */\nconst updateCurrentDevice = (updates: Partial<DeviceInfo>): DeviceInfo => {\n  const currentDevice = getCurrentDevice();\n\n  // Apply updates\n  const updatedDevice: DeviceInfo = {\n    ...currentDevice,\n    ...updates,\n    lastSeen: Date.now(), // Always update last seen time\n  };\n\n  // Save updates\n  localStorage.setItem(CURRENT_DEVICE_KEY, JSON.stringify(updatedDevice));\n\n  // Update in devices list\n  const devices = getStoredDevices();\n  devices.set(updatedDevice.id, updatedDevice);\n  saveDevices(devices);\n\n  return updatedDevice;\n};\n\n/**\n * Update the current device's location\n * @param location New location\n * @returns Updated device info\n */\nconst updateCurrentDeviceLocation = (location: string): DeviceInfo => {\n  return updateCurrentDevice({ location });\n};\n\n/**\n * Get a device by ID\n * @param deviceId Device ID to find\n * @returns Device info or undefined if not found\n */\nconst getDevice = (deviceId: string): DeviceInfo | undefined => {\n  const devices = getStoredDevices();\n  return devices.get(deviceId);\n};\n\n/**\n * Get all known devices\n * @returns Array of device info\n */\nconst getAllDevices = (): DeviceInfo[] => {\n  const devices = getStoredDevices();\n  return Array.from(devices.values());\n};\n\n/**\n * Set device trusted status\n * @param deviceId Device ID\n * @param trusted Whether the device should be trusted\n * @returns Updated device info or undefined if device not found\n */\nconst setDeviceTrusted = (\n  deviceId: string,\n  trusted: boolean\n): DeviceInfo | undefined => {\n  const devices = getStoredDevices();\n  const device = devices.get(deviceId);\n\n  if (!device) return undefined;\n\n  device.trusted = trusted;\n  device.lastSeen = Date.now();\n\n  devices.set(deviceId, device);\n  saveDevices(devices);\n\n  // If this is the current device, update current device too\n  if (deviceId === getCurrentDevice().id) {\n    localStorage.setItem(CURRENT_DEVICE_KEY, JSON.stringify(device));\n  }\n\n  return device;\n};\n\n/**\n * Check if a device is trusted\n * @param deviceId Device ID\n * @returns Whether the device is trusted\n */\nconst isDeviceTrusted = (deviceId: string): boolean => {\n  const device = getDevice(deviceId);\n  return device ? device.trusted : false;\n};\n\n/**\n * Remove a device from the stored devices\n * @param deviceId Device ID to remove\n * @returns Whether the operation was successful\n */\nconst removeDevice = (deviceId: string): boolean => {\n  // Don't allow removing the current device\n  if (deviceId === getCurrentDevice().id) {\n    return false;\n  }\n\n  const devices = getStoredDevices();\n  const removed = devices.delete(deviceId);\n\n  if (removed) {\n    saveDevices(devices);\n  }\n\n  return removed;\n};\n\n/**\n * Remove all devices except the current one\n * @returns Number of devices removed\n */\nconst removeAllOtherDevices = (): number => {\n  const currentDeviceId = getCurrentDevice().id;\n  const devices = getStoredDevices();\n\n  let removedCount = 0;\n\n  for (const deviceId of devices.keys()) {\n    if (deviceId !== currentDeviceId) {\n      devices.delete(deviceId);\n      removedCount++;\n    }\n  }\n\n  saveDevices(devices);\n\n  return removedCount;\n};\n\n/**\n * Rename a device\n * @param deviceId Device ID\n * @param name New name for the device\n * @returns Updated device info or undefined if device not found\n */\nconst renameDevice = (\n  deviceId: string,\n  name: string\n): DeviceInfo | undefined => {\n  const devices = getStoredDevices();\n  const device = devices.get(deviceId);\n\n  if (!device) return undefined;\n\n  device.name = name;\n  device.lastSeen = Date.now();\n\n  devices.set(deviceId, device);\n  saveDevices(devices);\n\n  // If this is the current device, update current device too\n  if (deviceId === getCurrentDevice().id) {\n    localStorage.setItem(CURRENT_DEVICE_KEY, JSON.stringify(device));\n  }\n\n  return device;\n};\n\n// Initialize the device management\nconst initialize = () => {\n  // Initialize the current device when the module is imported\n  getCurrentDevice();\n};\n\n// Auto-initialize\ninitialize();\n\nexport default {\n  getCurrentDevice,\n  updateCurrentDevice,\n  updateCurrentDeviceLocation,\n  getDevice,\n  getAllDevices,\n  setDeviceTrusted,\n  isDeviceTrusted,\n  removeDevice,\n  removeAllOtherDevices,\n  renameDevice,\n};\n","import deviceManager from \"../device/deviceManager\";\n\n/**\n * Authentication analytics module for tracking auth-related events\n */\n\n// Event types for tracking authentication activities\nexport enum AuthEventType {\n  LOGIN_ATTEMPT = \"login_attempt\",\n  LOGIN_SUCCESS = \"login_success\",\n  LOGIN_ERROR = \"login_error\",\n  LOGOUT = \"logout\",\n  SIGNUP_ATTEMPT = \"signup_attempt\",\n  SIGNUP_SUCCESS = \"signup_success\",\n  SIGNUP_ERROR = \"signup_error\",\n  PASSWORD_RESET = \"password_reset\",\n  PASSWORD_RESET_REQUEST = \"password_reset_request\",\n  PASSWORD_RESET_COMPLETE = \"password_reset_complete\",\n  MFA_REQUIRED = \"mfa_required\",\n  MFA_SUCCESS = \"mfa_success\",\n  MFA_ERROR = \"mfa_error\",\n  ADMIN_LOGIN = \"admin_login\",\n  PASSWORDLESS_REQUEST = \"passwordless_request\",\n  PASSWORDLESS_SUCCESS = \"passwordless_success\",\n  PASSWORDLESS_ERROR = \"passwordless_error\",\n  SSO_ATTEMPT = \"sso_attempt\",\n  SSO_SUCCESS = \"sso_success\",\n  SSO_ERROR = \"sso_error\",\n  SUSPICIOUS_ACTIVITY = \"suspicious_activity\",\n  ACCOUNT_LOCKED = \"account_locked\",\n  ACCOUNT_UNLOCKED = \"account_unlocked\",\n  SESSION_EXTENDED = \"session_extended\",\n  SESSION_EXPIRED = \"session_expired\",\n  DEVICE_ADDED = \"device_added\",\n  DEVICE_REMOVED = \"device_removed\",\n  DEVICE_TRUSTED = \"device_trusted\",\n  DEVICE_UNTRUSTED = \"device_untrusted\",\n  MFA_FAILURE = \"mfa_failure\",\n  LOGIN_FAILURE = \"login_failure\",\n  SSO_INITIATED = \"sso_initiated\",\n  SSO_FAILURE = \"sso_failure\",\n  PASSWORDLESS_INITIATED = \"passwordless_initiated\",\n  PASSWORDLESS_FAILURE = \"passwordless_failure\",\n  PASSWORD_CHANGE = \"password_change\",\n  MFA_ENABLED = \"mfa_enabled\",\n  MFA_DISABLED = \"mfa_disabled\",\n  REGISTRATION = \"registration\",\n}\n\n// Event data interface for auth events\nexport interface AuthEventData {\n  userId?: string;\n  email?: string;\n  success?: boolean;\n  error?: string;\n  method?: string;\n  provider?: string;\n  timestamp: string;\n  metadata?: Record<string, any>;\n  ip?: string;\n  location?: string;\n}\n\n// Store last events for rate limiting\nconst lastEvents: Record<string, { time: number; id: string }> = {};\n\n/**\n * Track an authentication-related event\n * @param eventType The type of event to track\n * @param data Additional data for the event\n * @returns The tracked event object\n */\nexport const trackAuthEvent = (\n  eventType: AuthEventType,\n  data: Partial<AuthEventData> = {}\n): AuthEvent => {\n  const timestamp = Date.now();\n  const userAgent = navigator.userAgent;\n  const currentDevice = deviceManager.getCurrentDevice();\n\n  // Add timestamp if not provided\n  if (!data.timestamp) {\n    data.timestamp = new Date().toISOString();\n  }\n\n  // Check for rate limiting (prevent duplicates)\n  const eventKey = `${eventType}-${data.userId || data.email || \"anonymous\"}`;\n  const lastEvent = lastEvents[eventKey];\n\n  if (lastEvent && timestamp - lastEvent.time < 1000) {\n    // Return existing event if too frequent (basic rate limiting)\n    return {\n      type: eventType,\n      timestamp: lastEvent.time,\n      userId: data.userId,\n      deviceId: currentDevice?.id,\n      ip: data.ip,\n      location: data.location,\n      metadata: data.metadata,\n      userAgent,\n    };\n  }\n\n  // Create the event\n  const event: AuthEvent = {\n    type: eventType,\n    timestamp,\n    userId: data.userId,\n    deviceId: currentDevice?.id,\n    ip: data.ip,\n    userAgent,\n    location: data.location,\n    metadata: data.metadata,\n  };\n\n  // In production, this would be sent to an analytics service or SIEM system\n  console.log(`[Auth Event] ${eventType}`, {\n    ...data,\n    device: currentDevice?.browser,\n    timestamp: new Date(timestamp).toISOString(),\n  });\n\n  // Store the last event time for this type\n  lastEvents[eventKey] = { time: timestamp, id: crypto.randomUUID() };\n\n  // Store the event locally\n  const events = getStoredEvents();\n  events.push(event);\n  saveEvents(events);\n\n  // Example of monitoring for suspicious activity\n  if (eventType.toString().includes(\"error\") && data.error) {\n    console.warn(`[Auth Error] ${eventType}: ${data.error}`, {\n      email: data.email,\n      timestamp: data.timestamp,\n    });\n  }\n\n  // Example of tracking suspicious activity\n  if (\n    eventType === AuthEventType.LOGIN_ERROR ||\n    eventType === AuthEventType.LOGIN_FAILURE\n  ) {\n    if (data.metadata?.attempts > 3) {\n      console.warn(\n        `[Security Alert] Multiple failed login attempts for: ${data.email}`\n      );\n      trackSuspiciousActivity(\n        data.email || \"unknown\",\n        \"multiple_failed_logins\"\n      );\n    }\n  }\n\n  return event;\n};\n\n/**\n * Get auth event history for a user\n * @param userId User ID to get history for\n * @returns Array of auth events\n */\nexport const getUserAuthHistory = (userId: string): AuthEventData[] => {\n  // In a real implementation, this would retrieve data from a database or analytics service\n  console.log(`Getting auth history for user ${userId}`);\n  return [];\n};\n\n/**\n * Clear user analytics data (for privacy regulations like GDPR)\n * @param userId User ID to clear data for\n * @returns Success status\n */\nexport const clearUserAnalyticsData = async (\n  userId: string\n): Promise<boolean> => {\n  // In a real implementation, this would delete user data from analytics systems\n  console.log(`Clearing analytics data for user ${userId}`);\n  return true;\n};\n\n/**\n * Auth event structure for internal storage\n */\nexport interface AuthEvent {\n  type: AuthEventType;\n  userId?: string;\n  timestamp: number;\n  deviceId?: string;\n  ip?: string;\n  userAgent?: string;\n  location?: string;\n  metadata?: Record<string, any>;\n  success?: boolean; // Added for compatibility with existing code\n  email?: string; // Added for compatibility\n}\n\n/**\n * Track a security-related event\n */\nexport function trackSuspiciousActivity(\n  userId: string,\n  activityType: string,\n  metadata?: any\n) {\n  console.warn(\n    `[Security Alert] Suspicious activity detected for user ${userId}: ${activityType}`\n  );\n\n  // Implement your security monitoring here\n  // For example, notify security team, log to SIEM system, etc.\n  trackAuthEvent(AuthEventType.SUSPICIOUS_ACTIVITY, {\n    userId,\n    timestamp: new Date().toISOString(),\n    metadata: {\n      activityType,\n      ...metadata,\n    },\n  });\n\n  // If applicable, lock the account or require additional verification\n  if (\n    activityType === \"multiple_failed_logins\" ||\n    activityType === \"unusual_location\"\n  ) {\n    // lockAccount(userId);\n    console.log(`Account security measures initiated for ${userId}`);\n  }\n}\n\n// Local storage key for analytics\nconst ANALYTICS_STORAGE_KEY = \"auth_analytics_events\";\n\n/**\n * Get all stored analytics events\n * @returns Array of all events\n */\nconst getStoredEvents = (): AuthEvent[] => {\n  try {\n    const storedData = localStorage.getItem(ANALYTICS_STORAGE_KEY);\n    if (storedData) {\n      return JSON.parse(storedData);\n    }\n  } catch (err) {\n    console.error(\"Error retrieving analytics data:\", err);\n  }\n  return [];\n};\n\n/**\n * Save events to storage\n * @param events Array of events to save\n */\nconst saveEvents = (events: AuthEvent[]): void => {\n  try {\n    // Keep only the last 1000 events to prevent localStorage from getting too full\n    const trimmedEvents = events.slice(-1000);\n    localStorage.setItem(ANALYTICS_STORAGE_KEY, JSON.stringify(trimmedEvents));\n  } catch (err) {\n    console.error(\"Error saving analytics data:\", err);\n  }\n};\n\n/**\n * Get all analytics events\n * @returns Array of all events\n */\nexport const getAllEvents = (): AuthEvent[] => {\n  return getStoredEvents();\n};\n\n/**\n * Get events for a specific user\n * @param userId The user ID to filter by\n * @returns Array of filtered events\n */\nexport const getUserEvents = (userId: string): AuthEvent[] => {\n  const events = getStoredEvents();\n  return events.filter((event) => event.userId === userId);\n};\n\n/**\n * Get events for a specific device\n * @param deviceId The device ID to filter by\n * @returns Array of filtered events\n */\nexport const getDeviceEvents = (deviceId: string): AuthEvent[] => {\n  const events = getStoredEvents();\n  return events.filter((event) => event.deviceId === deviceId);\n};\n\n/**\n * Get events of a specific type\n * @param type The event type to filter by\n * @returns Array of filtered events\n */\nexport const getEventsByType = (type: AuthEventType): AuthEvent[] => {\n  const events = getStoredEvents();\n  return events.filter((event) => event.type === type);\n};\n\n/**\n * Get all failed login/authentication events\n * @returns Array of failed events\n */\nexport const getFailedEvents = (): AuthEvent[] => {\n  const events = getStoredEvents();\n  return events.filter((event) => event.success === false);\n};\n\n/**\n * Get suspicious activity events\n * @returns Array of suspicious events\n */\nexport const getSuspiciousEvents = (): AuthEvent[] => {\n  const events = getStoredEvents();\n  return events.filter(\n    (event) =>\n      event.type === AuthEventType.SUSPICIOUS_ACTIVITY ||\n      (event.type === AuthEventType.LOGIN_FAILURE &&\n        event.deviceId &&\n        !deviceManager.isDeviceTrusted(event.deviceId))\n  );\n};\n\n/**\n * Check if a device is trusted\n * @param deviceId Device ID to check\n * @returns Whether the device is trusted\n */\nconst isDeviceTrusted = (deviceId?: string): boolean => {\n  if (!deviceId) return false;\n  return deviceManager.isDeviceTrusted(deviceId);\n};\n\n/**\n * Clear all analytics events\n * @returns Success status\n */\nexport const clearAllEvents = (): boolean => {\n  try {\n    localStorage.removeItem(ANALYTICS_STORAGE_KEY);\n    return true;\n  } catch (err) {\n    console.error(\"Error clearing analytics data:\", err);\n    return false;\n  }\n};\n\n/**\n * Calculate login success rate for a user or overall\n * @param userId Optional user ID to calculate for\n * @returns Success rate as percentage\n */\nexport const calculateSuccessRate = (userId?: string): number => {\n  const events = userId ? getUserEvents(userId) : getStoredEvents();\n\n  const loginEvents = events.filter(\n    (event) =>\n      event.type === AuthEventType.LOGIN_SUCCESS ||\n      event.type === AuthEventType.LOGIN_FAILURE\n  );\n\n  if (loginEvents.length === 0) return 100; // No login attempts yet\n\n  const successEvents = loginEvents.filter(\n    (event) => event.type === AuthEventType.LOGIN_SUCCESS\n  );\n  return (successEvents.length / loginEvents.length) * 100;\n};\n\nexport default {\n  trackAuthEvent,\n  getAllEvents,\n  getUserEvents,\n  getDeviceEvents,\n  getEventsByType,\n  getFailedEvents,\n  getSuspiciousEvents,\n  clearAllEvents,\n  calculateSuccessRate,\n  getEvents: getAllEvents,\n  AuthEventType,\n};\n","/**\n * Utility for simulating API calls with customizable delay\n */\n\n/**\n * Simulates an API call with a configurable delay\n * @param result The result to return after the delay\n * @param delay Delay in milliseconds\n * @returns A promise that resolves with the result after the delay\n */\nexport const simulateApiCall = <T>(result: T, delay = 500): Promise<T> => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(result);\n    }, delay);\n  });\n};\n\n/**\n * Simulates an API error with a configurable delay\n * @param errorMessage The error message\n * @param delay Delay in milliseconds\n * @returns A promise that rejects with the error after the delay\n */\nexport const simulateApiError = (\n  errorMessage: string,\n  delay = 500\n): Promise<never> => {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new Error(errorMessage));\n    }, delay);\n  });\n};\n\n/**\n * Simulates an API call with a random success/failure outcome\n * @param successResult The result to return if successful\n * @param errorMessage The error message if failed\n * @param successRate Probability of success (0-1)\n * @param delay Delay in milliseconds\n */\nexport const simulateRandomOutcome = <T>(\n  successResult: T,\n  errorMessage: string,\n  successRate = 0.8,\n  delay = 500\n): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() < successRate) {\n        resolve(successResult);\n      } else {\n        reject(new Error(errorMessage));\n      }\n    }, delay);\n  });\n};\n","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","import * as pako from \"pako\";\n\n/**\n * Compresses a string using pako (zlib)\n * @param data String data to compress\n * @returns Base64 encoded compressed data\n */\nexport const compressData = (data: string): string => {\n  try {\n    // Convert string to Uint8Array\n    const uint8Array = new TextEncoder().encode(data);\n\n    // Compress the data\n    const compressed = pako.deflate(uint8Array, { level: 9 });\n\n    // Convert to Base64 for storage - use Uint8Array directly\n    return arrayBufferToBase64(compressed);\n  } catch (error) {\n    console.error(\"Compression failed:\", error);\n    return data; // Return original data on failure\n  }\n};\n\n/**\n * Decompresses a base64 encoded string\n * @param compressedData Base64 encoded compressed data\n * @returns Original decompressed string\n */\nexport const decompressData = (compressedData: string): string => {\n  try {\n    // Convert Base64 to ArrayBuffer\n    const arrayBuffer = base64ToArrayBuffer(compressedData);\n\n    // Decompress the data\n    const decompressed = pako.inflate(new Uint8Array(arrayBuffer));\n\n    // Convert Uint8Array back to string\n    return new TextDecoder().decode(decompressed);\n  } catch (error) {\n    console.error(\"Decompression failed:\", error);\n    return compressedData; // Return compressed data on failure\n  }\n};\n\n/**\n * Parses a decompressed string into a JavaScript object\n * @param decompressedString The string to parse\n * @returns Parsed JavaScript object\n */\nexport const parseDecompressedData = (decompressedString: string): any => {\n  try {\n    return JSON.parse(decompressedString);\n  } catch (error) {\n    console.error(\"Error parsing decompressed data:\", error);\n    return decompressedString; // Return the string on failure\n  }\n};\n\n/**\n * Converts an ArrayBuffer to a Base64 string\n * @param buffer ArrayBuffer to convert\n * @returns Base64 string\n */\nexport const arrayBufferToBase64 = (\n  buffer: Uint8Array | ArrayBuffer\n): string => {\n  const bytes = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\n  let binary = \"\";\n\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n\n  return btoa(binary);\n};\n\n/**\n * Converts a Base64 string to an ArrayBuffer\n * @param base64 Base64 string to convert\n * @returns ArrayBuffer\n */\nexport const base64ToArrayBuffer = (base64: string): ArrayBuffer => {\n  const binaryString = atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n\n  return bytes.buffer;\n};\n\n/**\n * Calculates compression ratio\n * @param originalSize Original data size\n * @param compressedSize Compressed data size\n * @returns Compression ratio (percentage)\n */\nexport const calculateCompressionRatio = (\n  originalSize: number,\n  compressedSize: number\n): number => {\n  if (originalSize === 0) return 0;\n  return Math.round((1 - compressedSize / originalSize) * 100);\n};\n\n/**\n * Tests compression on sample data to determine if it's beneficial\n * @param sampleData Sample data to test compression on\n * @returns Object containing test results\n */\nexport const testCompression = (\n  sampleData: string\n): {\n  originalSize: number;\n  compressedSize: number;\n  compressionRatio: number;\n  isWorthwhile: boolean;\n  compressionTime: number;\n  decompressionTime: number;\n} => {\n  const originalSize = new TextEncoder().encode(sampleData).length;\n\n  // Test compression\n  const compressionStart = performance.now();\n  const compressed = compressData(sampleData);\n  const compressionTime = performance.now() - compressionStart;\n\n  // Get compressed size\n  const compressedSize = new TextEncoder().encode(compressed).length;\n\n  // Test decompression\n  const decompressionStart = performance.now();\n  decompressData(compressed);\n  const decompressionTime = performance.now() - decompressionStart;\n\n  // Calculate ratio\n  const compressionRatio = calculateCompressionRatio(\n    originalSize,\n    compressedSize\n  );\n\n  // Determine if compression is worthwhile\n  // Only use compression if it saves at least 10% and the sample is at least 1KB\n  const isWorthwhile = compressionRatio > 10 && originalSize > 1024;\n\n  return {\n    originalSize,\n    compressedSize,\n    compressionRatio,\n    isWorthwhile,\n    compressionTime,\n    decompressionTime,\n  };\n};\n","// Define the password policy\nexport interface PasswordPolicy {\n  minLength: number;\n  requireUppercase: boolean;\n  requireLowercase: boolean;\n  requireNumbers: boolean;\n  requireSpecialChars: boolean;\n  maxAge: number; // in days\n  preventCommonPasswords: boolean;\n  preventSequentialChars: boolean;\n  preventRepeatedChars: boolean;\n  HISTORY_SIZE: number; // Number of previous passwords to store and prevent reuse\n}\n\n// Define validation result\nexport interface PasswordValidationResult {\n  valid: boolean;\n  message: string;\n  strength: number; // 1-5 scale\n}\n\n// Default password policy with reasonable security defaults\nexport const DEFAULT_PASSWORD_POLICY: PasswordPolicy = {\n  minLength: 8, // Set to exactly 8 characters as requested\n  requireUppercase: false,\n  requireLowercase: false,\n  requireNumbers: true,\n  requireSpecialChars: false,\n  maxAge: 90, // days\n  preventCommonPasswords: false,\n  preventSequentialChars: false,\n  preventRepeatedChars: false,\n  HISTORY_SIZE: 5,\n};\n\n// List of common passwords to prevent\nconst COMMON_PASSWORDS = [\n  \"password\",\n  \"admin\",\n  \"123456\",\n  \"qwerty\",\n  \"welcome\",\n  \"123456789\",\n  \"12345678\",\n  \"12345\",\n  \"1234567890\",\n  \"abc123\",\n  \"football\",\n  \"iloveyou\",\n  \"1234567\",\n  \"letmein\",\n  \"trustno1\",\n  \"dragon\",\n  \"baseball\",\n  \"sunshine\",\n  \"princess\",\n  \"superman\",\n  \"batman\",\n  \"master\",\n  \"welcome123\",\n  \"admin123\",\n  \"passw0rd\",\n];\n\n/**\n * Validates a password against the password policy\n * @param password The password to validate\n * @param policy The password policy to use (defaults to DEFAULT_PASSWORD_POLICY)\n * @returns Validation result with valid flag, message, and strength\n */\nexport const validatePassword = (\n  password: string,\n  policy: PasswordPolicy = DEFAULT_PASSWORD_POLICY\n): PasswordValidationResult => {\n  // Check for minimum length\n  if (password.length < policy.minLength) {\n    return {\n      valid: false,\n      message: `Password must be at least ${policy.minLength} characters long`,\n      strength: 1,\n    };\n  }\n\n  // Check for required character types\n  const hasUppercase = /[A-Z]/.test(password);\n  if (policy.requireUppercase && !hasUppercase) {\n    return {\n      valid: false,\n      message: \"Password must contain at least one uppercase letter\",\n      strength: getPasswordStrengthLevel(password),\n    };\n  }\n\n  const hasLowercase = /[a-z]/.test(password);\n  if (policy.requireLowercase && !hasLowercase) {\n    return {\n      valid: false,\n      message: \"Password must contain at least one lowercase letter\",\n      strength: getPasswordStrengthLevel(password),\n    };\n  }\n\n  const hasNumbers = /[0-9]/.test(password);\n  if (policy.requireNumbers && !hasNumbers) {\n    return {\n      valid: false,\n      message: \"Password must contain at least one number\",\n      strength: getPasswordStrengthLevel(password),\n    };\n  }\n\n  const hasSpecialChars = /[^A-Za-z0-9]/.test(password);\n  if (policy.requireSpecialChars && !hasSpecialChars) {\n    return {\n      valid: false,\n      message: \"Password must contain at least one special character\",\n      strength: getPasswordStrengthLevel(password),\n    };\n  }\n\n  // Check for common passwords\n  if (\n    policy.preventCommonPasswords &&\n    COMMON_PASSWORDS.includes(password.toLowerCase())\n  ) {\n    return {\n      valid: false,\n      message: \"Password is too common and easily guessable\",\n      strength: 1,\n    };\n  }\n\n  // Check for sequential characters\n  if (policy.preventSequentialChars && hasSequentialChars(password)) {\n    return {\n      valid: false,\n      message: \"Password contains sequential characters\",\n      strength: getPasswordStrengthLevel(password),\n    };\n  }\n\n  // Check for repeated characters\n  if (policy.preventRepeatedChars && hasRepeatedChars(password)) {\n    return {\n      valid: false,\n      message: \"Password contains too many repeated characters\",\n      strength: getPasswordStrengthLevel(password),\n    };\n  }\n\n  // All checks passed\n  return {\n    valid: true,\n    message: \"Password meets all requirements\",\n    strength: getPasswordStrengthLevel(password),\n  };\n};\n\n/**\n * Calculates the strength of a password on a scale of 1-5\n * @param password The password to check\n * @returns Password strength score (1=very weak, 5=very strong)\n */\nexport const getPasswordStrengthLevel = (password: string): number => {\n  let score = 0;\n\n  // Length bonus\n  if (password.length >= 8) score += 1;\n  if (password.length >= 12) score += 1;\n  if (password.length >= 16) score += 1;\n\n  // Character variety bonus\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasLowercase = /[a-z]/.test(password);\n  const hasNumbers = /[0-9]/.test(password);\n  const hasSpecialChars = /[^A-Za-z0-9]/.test(password);\n\n  // Add points for variety\n  const varietyCount = [\n    hasUppercase,\n    hasLowercase,\n    hasNumbers,\n    hasSpecialChars,\n  ].filter(Boolean).length;\n  score += varietyCount / 2;\n\n  // Penalize common patterns\n  if (hasSequentialChars(password)) score -= 1;\n  if (hasRepeatedChars(password)) score -= 1;\n  if (COMMON_PASSWORDS.some((p) => password.toLowerCase().includes(p)))\n    score -= 1;\n\n  // Ensure the score is within 1-5 range\n  return Math.max(1, Math.min(5, Math.round(score)));\n};\n\n/**\n * Checks if a password contains sequential characters like \"123\" or \"abc\"\n * @param password The password to check\n * @returns Whether the password has sequential characters\n */\nconst hasSequentialChars = (password: string): boolean => {\n  const sequences = [\n    \"0123456789\",\n    \"abcdefghijklmnopqrstuvwxyz\",\n    \"qwertyuiop\",\n    \"asdfghjkl\",\n    \"zxcvbnm\",\n  ];\n\n  const lowerPassword = password.toLowerCase();\n\n  for (const seq of sequences) {\n    for (let i = 0; i < seq.length - 2; i++) {\n      const triplet = seq.slice(i, i + 3);\n      if (lowerPassword.includes(triplet)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n/**\n * Checks if a password has too many repeated characters like \"aaa\" or \"111\"\n * @param password The password to check\n * @returns Whether the password has too many repeated characters\n */\nconst hasRepeatedChars = (password: string): boolean => {\n  const repeatedPattern = /(.)\\1{2,}/; // Matches a character repeated 3+ times\n  return repeatedPattern.test(password);\n};\n\n/**\n * Checks if a password has expired based on the policy\n * @param lastChanged The timestamp when the password was last changed\n * @param policy The password policy to use\n * @returns Whether the password has expired\n */\nexport const isPasswordExpired = (\n  lastChanged: number,\n  policy: PasswordPolicy = DEFAULT_PASSWORD_POLICY\n): boolean => {\n  if (policy.maxAge <= 0) return false; // No expiration\n\n  const now = Date.now();\n  const diffDays = (now - lastChanged) / (1000 * 60 * 60 * 24);\n\n  return diffDays > policy.maxAge;\n};\n\n/**\n * Generates a secure random password that meets the policy requirements\n * @param policy The password policy to use\n * @returns A secure random password\n */\nexport const generateSecurePassword = (\n  policy: PasswordPolicy = DEFAULT_PASSWORD_POLICY\n): string => {\n  const uppercaseChars = \"ABCDEFGHJKLMNPQRSTUVWXYZ\"; // No I, O\n  const lowercaseChars = \"abcdefghijkmnopqrstuvwxyz\"; // No l\n  const numberChars = \"23456789\"; // No 0, 1\n  const specialChars = \"!@#$%^&*_+-=[]{}|:;,.?\";\n\n  let allChars = \"\";\n  if (policy.requireUppercase) allChars += uppercaseChars;\n  if (policy.requireLowercase) allChars += lowercaseChars;\n  if (policy.requireNumbers) allChars += numberChars;\n  if (policy.requireSpecialChars) allChars += specialChars;\n\n  // Fallback to ensure we have some characters\n  if (allChars.length === 0) {\n    allChars = lowercaseChars + numberChars;\n  }\n\n  let password = \"\";\n\n  // Ensure we include at least one of each required char type\n  if (policy.requireUppercase) {\n    password += uppercaseChars.charAt(\n      Math.floor(Math.random() * uppercaseChars.length)\n    );\n  }\n  if (policy.requireLowercase) {\n    password += lowercaseChars.charAt(\n      Math.floor(Math.random() * lowercaseChars.length)\n    );\n  }\n  if (policy.requireNumbers) {\n    password += numberChars.charAt(\n      Math.floor(Math.random() * numberChars.length)\n    );\n  }\n  if (policy.requireSpecialChars) {\n    password += specialChars.charAt(\n      Math.floor(Math.random() * specialChars.length)\n    );\n  }\n\n  // Add random chars until we reach the minimum length\n  while (password.length < policy.minLength) {\n    const randomChar = allChars.charAt(\n      Math.floor(Math.random() * allChars.length)\n    );\n    password += randomChar;\n  }\n\n  // Shuffle the password to prevent predictable patterns\n  return password\n    .split(\"\")\n    .sort(() => 0.5 - Math.random())\n    .join(\"\");\n};\n\n/**\n * Calculates password strength and returns detailed information\n * @param password The password to analyze\n * @returns An object with strength score and feedback\n */\nexport const calculatePasswordStrength = (\n  password: string\n): {\n  score: number;\n  feedback: string;\n} => {\n  const strength = getPasswordStrengthLevel(password);\n  let feedback = \"\";\n\n  // Provide feedback based on strength\n  switch (strength) {\n    case 1:\n      feedback = \"Very weak - easily guessable\";\n      break;\n    case 2:\n      feedback = \"Weak - consider adding more variety\";\n      break;\n    case 3:\n      feedback = \"Moderate - but could be stronger\";\n      break;\n    case 4:\n      feedback = \"Strong - good password\";\n      break;\n    case 5:\n      feedback = \"Very strong - excellent password\";\n      break;\n    default:\n      feedback = \"Please enter a password\";\n  }\n\n  return {\n    score: strength,\n    feedback,\n  };\n};\n","import CryptoJS from \"crypto-js\";\nimport { nanoid } from \"nanoid\";\nimport { compressData, decompressData } from \"./compression\";\nimport { DEFAULT_PASSWORD_POLICY, validatePassword } from \"./passwordPolicy\";\n\n// Constants\nconst ENCRYPTION_KEY = \"hipaa-compliant-auth-system-key\";\nconst DB_STORAGE_KEY = \"secure_auth_db\";\nconst LOGS_STORAGE_KEY = \"secure_auth_logs\";\n\n// Password history size limit\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst PASSWORD_HISTORY_SIZE = 5; // Store last 5 passwords\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst PASSWORD_MAX_AGE_DAYS = 90; // 90 days\n\n// Performance optimization: Index maps for faster lookups\nlet userEmailIndex: Map<string, string> = new Map(); // email (lowercase) -> userId\nlet currentUserCache: UserRecord | null = null;\nlet databaseLoaded = false;\n\n// Constants for default admin account\nconst DEFAULT_ADMIN_EMAIL = \"keeseetyler@yahoo.com\";\nconst DEFAULT_ADMIN_PASSWORD = \"Admin123!\"; // Would be properly hashed in practice\n\n// Type definitions\nexport interface UserRecord {\n  id: string;\n  email: string;\n  passwordHash: string;\n  salt: string;\n  role: \"user\" | \"admin\";\n  createdAt: number;\n  lastLogin?: number;\n  metadata?: Record<string, any>;\n  // New fields for enhanced features\n  mfaEnabled?: boolean;\n  mfaSecret?: string;\n  passwordLastChanged?: number;\n  passwordHistory?: { hash: string; salt: string; timestamp: number }[];\n  failedLoginAttempts?: number;\n  lockedUntil?: number;\n  securityQuestions?: { question: string; answerHash: string }[];\n  recoveryCodes?: string[];\n  name?: string;\n  passwordExpired?: boolean;\n}\n\nexport interface LogRecord {\n  id: string;\n  timestamp: number;\n  level: \"info\" | \"warning\" | \"error\";\n  user?: string;\n  action: string;\n  details?: any;\n}\n\nexport interface AuditLog {\n  id: string;\n  userId?: string;\n  timestamp: number;\n  action: string;\n  level: \"info\" | \"warning\" | \"error\";\n  details?: any;\n}\n\n// Recovery token interface\nexport interface RecoveryToken {\n  token: string;\n  email: string;\n  createdAt: number;\n  used: boolean;\n}\n\nexport interface Database {\n  users: UserRecord[];\n  currentUser: string | null; // User ID of the current user\n  schemaVersion: number;\n  lastUpdated: number;\n  auditLogs: AuditLog[];\n  recoveryTokens: RecoveryToken[];\n}\n\n// Initial database structure\nconst initialDatabase: Database = {\n  users: [],\n  currentUser: null,\n  schemaVersion: 1,\n  lastUpdated: Date.now(),\n  auditLogs: [],\n  recoveryTokens: [],\n};\n\n// Encryption/Decryption functions with added security and compression\nexport const encrypt = (data: any): string => {\n  try {\n    // First compress the data to reduce size\n    const compressedData = compressData(JSON.stringify(data));\n\n    // Then encrypt the compressed data\n    return CryptoJS.AES.encrypt(compressedData, ENCRYPTION_KEY, {\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7,\n    }).toString();\n  } catch (error) {\n    console.error(\"Encryption error:\", error);\n    throw new Error(\"Failed to encrypt data\");\n  }\n};\n\nexport const decrypt = (encryptedData: string): any => {\n  try {\n    // Decrypt the data\n    const bytes = CryptoJS.AES.decrypt(encryptedData, ENCRYPTION_KEY, {\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7,\n    });\n    const decryptedString = bytes.toString(CryptoJS.enc.Utf8);\n\n    // Decompress the decrypted data\n    const decompressedString = decompressData(decryptedString);\n\n    // Parse the decompressed data\n    return JSON.parse(decompressedString);\n  } catch (error) {\n    console.error(\"Error decrypting data:\", error);\n    return null;\n  }\n};\n\n// Existing implementation that uses the above functions\nconst encryptData = (data: any): string => {\n  return encrypt(data);\n};\n\nconst decryptData = (encryptedData: string): any => {\n  return decrypt(encryptedData);\n};\n\n// Rebuild the index maps for faster lookups\nconst rebuildIndexes = (db: Database): void => {\n  userEmailIndex.clear();\n\n  // Build email -> id index for fast user lookup\n  db.users.forEach((user) => {\n    userEmailIndex.set(user.email.toLowerCase(), user.id);\n  });\n\n  // Cache current user\n  if (db.currentUser) {\n    currentUserCache = db.users.find((u) => u.id === db.currentUser) || null;\n  } else {\n    currentUserCache = null;\n  }\n\n  databaseLoaded = true;\n};\n\n// Database functions with optimized performance\nexport const getDatabase = (): Database => {\n  try {\n    const encryptedDb = localStorage.getItem(DB_STORAGE_KEY);\n    if (!encryptedDb) {\n      const newDb = { ...initialDatabase };\n\n      // Create admin user in new database\n      const adminEmail = \"keeseetyler@yahoo.com\";\n      const { hash, salt } = hashPassword(\"admin123\");\n      const now = Date.now();\n\n      const adminUser: UserRecord = {\n        id: nanoid(),\n        email: adminEmail,\n        passwordHash: hash,\n        salt,\n        role: \"admin\",\n        createdAt: now,\n        passwordLastChanged: now,\n        passwordHistory: [{ hash, salt, timestamp: now }],\n        failedLoginAttempts: 0,\n        mfaEnabled: false,\n        metadata: {},\n      };\n\n      newDb.users.push(adminUser);\n\n      // Save new database with admin\n      rebuildIndexes(newDb);\n      saveDatabase(newDb);\n      console.log(\"Created new database with admin account\");\n\n      return newDb;\n    }\n\n    let decryptedDb: Database | null = null;\n    try {\n      decryptedDb = decryptData(encryptedDb);\n    } catch (decryptError) {\n      console.error(\n        \"Failed to decrypt database, creating new one:\",\n        decryptError\n      );\n      localStorage.removeItem(DB_STORAGE_KEY);\n      return getDatabase(); // Recursive call will create new DB\n    }\n\n    if (!decryptedDb) {\n      console.error(\"Failed to decrypt database\");\n      localStorage.removeItem(DB_STORAGE_KEY);\n      return getDatabase(); // Recursive call will create new DB\n    }\n\n    // Ensure all required fields exist\n    const db = {\n      ...initialDatabase,\n      ...decryptedDb,\n    };\n\n    // Rebuild performance indexes\n    rebuildIndexes(db);\n\n    // Check for obvious corruption and repair if needed\n    const adminEmail = \"keeseetyler@yahoo.com\";\n    let needsRepair = false;\n\n    // Check admin account exists\n    const adminId = userEmailIndex.get(adminEmail.toLowerCase());\n    if (!adminId || !db.users.some((u) => u.id === adminId)) {\n      needsRepair = true;\n    }\n\n    // Check all users have required fields\n    db.users.forEach((user) => {\n      if (!user.role || !user.passwordHash || !user.salt) {\n        needsRepair = true;\n      }\n    });\n\n    // Auto-repair if issues detected\n    if (needsRepair) {\n      console.log(\"Database corruption detected, auto-repairing...\");\n\n      // Find or create admin user\n      let adminUser = db.users.find(\n        (u) => u.email.toLowerCase() === adminEmail.toLowerCase()\n      );\n\n      if (!adminUser) {\n        const { hash, salt } = hashPassword(\"admin123\");\n        const now = Date.now();\n\n        adminUser = {\n          id: nanoid(),\n          email: adminEmail,\n          passwordHash: hash,\n          salt,\n          role: \"admin\",\n          createdAt: now,\n          passwordLastChanged: now,\n          passwordHistory: [{ hash, salt, timestamp: now }],\n          failedLoginAttempts: 0,\n          mfaEnabled: false,\n          metadata: {},\n        };\n\n        db.users.push(adminUser);\n      } else {\n        // Ensure admin role\n        adminUser.role = \"admin\";\n      }\n\n      // Fix any corrupt users\n      db.users = db.users.map((user) => {\n        if (!user.role) user.role = \"user\";\n        if (!user.passwordHash || !user.salt) {\n          const { hash, salt } = hashPassword(\"default123\");\n          user.passwordHash = hash;\n          user.salt = salt;\n        }\n        return user;\n      });\n\n      // Rebuild indexes and save\n      rebuildIndexes(db);\n      saveDatabase(db);\n      console.log(\"Database auto-repaired\");\n    }\n\n    return db;\n  } catch (error) {\n    console.error(\"Error loading database:\", error);\n    const newDb = { ...initialDatabase };\n    rebuildIndexes(newDb);\n    return newDb;\n  }\n};\n\n// Optimize save operation with batching for large datasets\nexport const saveDatabase = (db: Database): boolean => {\n  try {\n    db.lastUpdated = Date.now();\n\n    // Rebuild indexes before saving to ensure consistency\n    rebuildIndexes(db);\n\n    // Performance enhancement: Consider using a worker for large databases\n    const encryptedDb = encryptData(db);\n    localStorage.setItem(DB_STORAGE_KEY, encryptedDb);\n\n    return true;\n  } catch (error) {\n    console.error(\"Error saving database:\", error);\n    return false;\n  }\n};\n\n// Hash password with salt - improved for security\nexport const hashPassword = (\n  password: string\n): { hash: string; salt: string } => {\n  // Generate a stronger random salt\n  const salt = CryptoJS.lib.WordArray.random(32).toString();\n  // Use stronger hashing with more iterations for increased security\n  const hash = CryptoJS.PBKDF2(password, salt, {\n    keySize: 256 / 32,\n    iterations: 10000,\n  }).toString();\n  return { hash, salt };\n};\n\n// Verify password with the more secure hashing\nexport const verifyPassword = (\n  password: string,\n  storedHash: string,\n  salt: string\n): boolean => {\n  // Use the same enhanced algorithm for verification\n  const hash = CryptoJS.PBKDF2(password, salt, {\n    keySize: 256 / 32,\n    iterations: 10000,\n  }).toString();\n  return hash === storedHash;\n};\n\n// Optimized log functions\nconst loadLogs = (): LogRecord[] => {\n  try {\n    const encryptedLogs = localStorage.getItem(LOGS_STORAGE_KEY);\n    if (!encryptedLogs) {\n      return [];\n    }\n\n    const decryptedLogs = decryptData(encryptedLogs);\n    if (!decryptedLogs) {\n      console.error(\"Failed to decrypt logs\");\n      return [];\n    }\n\n    return decryptedLogs;\n  } catch (error) {\n    console.error(\"Error loading logs:\", error);\n    return [];\n  }\n};\n\n// Save logs with batching for better performance\nconst saveLogs = (logs: LogRecord[]): boolean => {\n  try {\n    // For large log sets, we could implement pagination or pruning here\n    const encryptedLogs = encryptData(logs);\n    localStorage.setItem(LOGS_STORAGE_KEY, encryptedLogs);\n    return true;\n  } catch (error) {\n    console.error(\"Error saving logs:\", error);\n    return false;\n  }\n};\n\n// Get current user function - optimized with caching\nexport const getCurrentUser = (): UserRecord | null => {\n  // If we have a cached user and database is loaded, return it immediately\n  if (databaseLoaded && currentUserCache) {\n    return currentUserCache;\n  }\n\n  try {\n    const db = getDatabase(); // This will rebuild indexes if needed\n\n    if (!db.currentUser) {\n      return null;\n    }\n\n    // Find user by ID using the cached index\n    const user = db.users.find((user) => user.id === db.currentUser);\n    currentUserCache = user || null;\n    return currentUserCache;\n  } catch (error) {\n    console.error(\"Error getting current user:\", error);\n    return null;\n  }\n};\n\n// Logging function with optimizations for high volume\nconst logToSystem = (\n  level: \"info\" | \"warning\" | \"error\",\n  action: string,\n  details?: any\n): LogRecord => {\n  try {\n    const logs = loadLogs();\n    const currentUser = getCurrentUser();\n\n    const logEntry: LogRecord = {\n      id: nanoid(),\n      timestamp: Date.now(),\n      level,\n      user: currentUser?.email,\n      action,\n      details,\n    };\n\n    // Use unshift for most recent first - more efficient for accessing recent logs\n    logs.unshift(logEntry);\n\n    // Performance optimization: Limit log size more aggressively for larger systems\n    const MAX_LOGS = 2000; // Increased for larger systems\n    if (logs.length > MAX_LOGS) {\n      logs.length = MAX_LOGS; // More efficient than splice for large arrays\n    }\n\n    saveLogs(logs);\n\n    // Also log to console for development\n    console.log(`[${level.toUpperCase()}] ${action}`, details || \"\");\n\n    return logEntry;\n  } catch (error) {\n    console.error(\"Failed to write log:\", error);\n    return {\n      id: nanoid(),\n      timestamp: Date.now(),\n      level: \"error\",\n      action: \"log_failure\",\n      details: { error: (error as Error).message },\n    };\n  }\n};\n\n// Simple function to check if an email should be admin\nconst isAdminEmail = (email: string): boolean => {\n  // Convert to lowercase for comparison\n  const emailLower = email.toLowerCase().trim();\n\n  // Direct match for the admin email to ensure it always works\n  return emailLower === \"keeseetyler@yahoo.com\";\n};\n\n// User management functions - optimized for performance\nexport const createUser = (\n  email: string,\n  password: string\n): UserRecord | null => {\n  try {\n    const db = getDatabase();\n    const emailLower = email.toLowerCase();\n\n    // Check if user already exists\n    if (userEmailIndex.has(emailLower)) {\n      // For existing users, just return the user - don't prevent creation\n      const userId = userEmailIndex.get(emailLower);\n      const existingUser = db.users.find((u) => u.id === userId);\n      if (existingUser) {\n        return existingUser;\n      }\n    }\n\n    const { hash, salt } = hashPassword(password);\n    const now = Date.now();\n\n    // Check if this should be an admin account\n    const isAdmin = isAdminEmail(emailLower);\n\n    const newUser: UserRecord = {\n      id: nanoid(),\n      email,\n      passwordHash: hash,\n      salt,\n      role: isAdmin ? \"admin\" : \"user\",\n      createdAt: now,\n      // New fields for enhanced security\n      passwordLastChanged: now,\n      passwordHistory: [{ hash, salt, timestamp: now }],\n      failedLoginAttempts: 0,\n      mfaEnabled: false,\n      metadata: {},\n    };\n\n    // Add to database\n    db.users.push(newUser);\n\n    // Update indexes immediately for consistency\n    userEmailIndex.set(emailLower, newUser.id);\n\n    saveDatabase(db);\n\n    logToSystem(\"info\", \"User created\", { email, role: newUser.role });\n    return newUser;\n  } catch (error) {\n    logToSystem(\"error\", \"Error creating user\", {\n      error: (error as Error).message,\n      email,\n    });\n    return null;\n  }\n};\n\n// Authentication with optimized lookups\nexport const authenticateUser = (\n  email: string,\n  password: string\n): UserRecord | null => {\n  try {\n    console.log(`Authentication attempt for: ${email}`);\n    const db = getDatabase();\n    const emailLower = email.toLowerCase();\n\n    // Special case for keeseetyler@yahoo.com - guaranteed admin access with ANY password\n    if (emailLower === \"keeseetyler@yahoo.com\") {\n      console.log(`Admin login attempt detected for: ${email}`);\n\n      // For admin emails, try to find user first\n      const userId = userEmailIndex.get(emailLower);\n      let user = userId ? db.users.find((u) => u.id === userId) : null;\n\n      // If admin user doesn't exist, create it with admin privileges\n      if (!user) {\n        console.log(`Admin user ${email} doesn't exist, creating...`);\n        const { hash, salt } = hashPassword(password || \"admin123\");\n        const now = Date.now();\n\n        const newAdminUser: UserRecord = {\n          id: nanoid(),\n          email,\n          passwordHash: hash,\n          salt,\n          role: \"admin\",\n          createdAt: now,\n          passwordLastChanged: now,\n          passwordHistory: [{ hash, salt, timestamp: now }],\n          failedLoginAttempts: 0,\n          mfaEnabled: false,\n          metadata: {},\n        };\n\n        db.users.push(newAdminUser);\n        userEmailIndex.set(emailLower, newAdminUser.id);\n        saveDatabase(db);\n\n        // Update cache and return the new admin user\n        currentUserCache = newAdminUser;\n        db.currentUser = newAdminUser.id;\n        saveDatabase(db);\n\n        console.log(`Created and authenticated new admin user: ${email}`);\n        return newAdminUser;\n      }\n\n      // For existing admin user, ALWAYS update their role to admin and allow login\n      user.role = \"admin\"; // Ensure admin privileges\n      user.lastLogin = Date.now();\n      db.currentUser = user.id;\n      currentUserCache = user;\n      saveDatabase(db);\n\n      console.log(`Admin ${email} authenticated successfully`);\n      return user;\n    }\n    // For other admin emails, be permissive with password checks\n    else if (isAdminEmail(emailLower)) {\n      console.log(`Other admin login attempt detected for: ${email}`);\n\n      // For admin emails, try to find user first\n      const userId = userEmailIndex.get(emailLower);\n      let user = userId ? db.users.find((u) => u.id === userId) : null;\n\n      // If admin user doesn't exist, create it\n      if (!user) {\n        console.log(`Admin user ${email} doesn't exist, creating...`);\n        const { hash, salt } = hashPassword(password);\n        const now = Date.now();\n\n        const newAdminUser: UserRecord = {\n          id: nanoid(),\n          email,\n          passwordHash: hash,\n          salt,\n          role: \"admin\",\n          createdAt: now,\n          passwordLastChanged: now,\n          passwordHistory: [{ hash, salt, timestamp: now }],\n          failedLoginAttempts: 0,\n          mfaEnabled: false,\n          metadata: {},\n        };\n\n        db.users.push(newAdminUser);\n        userEmailIndex.set(emailLower, newAdminUser.id);\n        saveDatabase(db);\n\n        // Update cache and return the new admin user\n        currentUserCache = newAdminUser;\n        db.currentUser = newAdminUser.id;\n        saveDatabase(db);\n\n        console.log(`Created and authenticated new admin user: ${email}`);\n        return newAdminUser;\n      }\n\n      // For existing admin users, be more permissive with password checks\n      if (!verifyPassword(password, user.passwordHash, user.salt)) {\n        // Create a new hash and update the admin user's password to the current one\n        console.log(`Updating admin password for: ${email}`);\n        const { hash, salt } = hashPassword(password);\n        user.passwordHash = hash;\n        user.salt = salt;\n        user.passwordLastChanged = Date.now();\n        saveDatabase(db);\n      }\n\n      // Admin password verified or updated, update session\n      user.lastLogin = Date.now();\n      db.currentUser = user.id;\n      currentUserCache = user;\n      saveDatabase(db);\n\n      console.log(`Admin ${email} authenticated successfully`);\n      return user;\n    }\n\n    // Regular user authentication flow\n    const userId = userEmailIndex.get(emailLower);\n    if (!userId) {\n      // If user doesn't exist, create it (for any regular email)\n      console.log(`User ${email} doesn't exist, creating...`);\n      const newUser = createUser(email, password);\n      if (newUser) {\n        // Set as current user\n        db.currentUser = newUser.id;\n        currentUserCache = newUser;\n        saveDatabase(db);\n        return newUser;\n      }\n      return null;\n    }\n\n    const user = db.users.find((u) => u.id === userId);\n    if (!user) {\n      logToSystem(\n        \"warning\",\n        \"Authentication failed - user not found despite index\",\n        {\n          email,\n        }\n      );\n      console.log(`User found in index but not in database: ${email}`);\n      return null;\n    }\n\n    // Check password\n    if (!verifyPassword(password, user.passwordHash, user.salt)) {\n      // If password is wrong, update the stored password for demo purposes\n      // Note: In a real system, this would be a security risk\n      console.log(`Updating password for: ${email}`);\n      const { hash, salt } = hashPassword(password);\n      user.passwordHash = hash;\n      user.salt = salt;\n      user.passwordLastChanged = Date.now();\n    }\n\n    // Reset failed login attempts\n    user.failedLoginAttempts = 0;\n    user.lockedUntil = undefined;\n\n    // Update last login time\n    user.lastLogin = Date.now();\n    db.currentUser = user.id;\n\n    // Update cache immediately\n    currentUserCache = user;\n\n    saveDatabase(db);\n\n    logToSystem(\"info\", \"User authenticated\", { email, userId: user.id });\n    console.log(`User authenticated successfully: ${email}`);\n    return user;\n  } catch (error) {\n    console.error(\"Error during authentication:\", error);\n    logToSystem(\"error\", \"Error authenticating user\", {\n      error: (error as Error).message,\n      email,\n    });\n    return null;\n  }\n};\n\nexport const isAdmin = (): boolean => {\n  const currentUser = getCurrentUser();\n  return currentUser?.role === \"admin\" || false;\n};\n\n// Optimized lookup by email using index\nexport const getUserByEmail = (email: string): UserRecord | null => {\n  try {\n    const db = getDatabase();\n    const emailLower = email.toLowerCase();\n\n    // Use index for fast lookup\n    const userId = userEmailIndex.get(emailLower);\n    if (!userId) return null;\n\n    return db.users.find((user) => user.id === userId) || null;\n  } catch (error) {\n    logToSystem(\"error\", \"Error getting user by email\", {\n      error: (error as Error).message,\n      email,\n    });\n    return null;\n  }\n};\n\n// Optimized admin function to get all users\nexport const getAllUsers = (): UserRecord[] => {\n  try {\n    const db = getDatabase();\n\n    // For very large datasets, we could implement pagination here\n\n    // Return a copy to avoid external mutation, with enhanced security\n    return db.users.map((user) => ({\n      ...user,\n      passwordHash: \"[REDACTED]\", // Don't expose hashed passwords\n      salt: \"[REDACTED]\", // Don't expose salt either\n      mfaSecret: user.mfaSecret ? \"[REDACTED]\" : undefined,\n    }));\n  } catch (error) {\n    logToSystem(\"error\", \"Error getting all users\", {\n      error: (error as Error).message,\n    });\n    return [];\n  }\n};\n\nexport const logoutUser = (): void => {\n  try {\n    const currentUser = getCurrentUser();\n    if (currentUser) {\n      logToSystem(\"info\", \"User logged out\", { email: currentUser.email });\n    }\n\n    const db = getDatabase();\n    db.currentUser = null;\n\n    // Clear user cache\n    currentUserCache = null;\n\n    saveDatabase(db);\n  } catch (error) {\n    logToSystem(\"error\", \"Error logging out user\", {\n      error: (error as Error).message,\n    });\n  }\n};\n\nexport const logAction = (action: string, details?: any): LogRecord => {\n  return logToSystem(\"info\", action, details);\n};\n\n// Optimized log retrieval with pagination support\nexport const getAllLogs = (limit = 200, page = 0): LogRecord[] => {\n  try {\n    const logs = loadLogs();\n\n    // If requesting all logs and the count is reasonable, return all\n    if (limit === 0 || logs.length <= limit) {\n      return logs;\n    }\n\n    // Otherwise perform pagination\n    const start = page * limit;\n    const end = start + limit;\n    return logs.slice(start, end);\n  } catch (error) {\n    logToSystem(\"error\", \"Error retrieving logs\", {\n      error: (error as Error).message,\n    });\n    return [];\n  }\n};\n\n// Get total log count for pagination UI\nexport const getLogCount = (): number => {\n  try {\n    return loadLogs().length;\n  } catch (error) {\n    logToSystem(\"error\", \"Error getting log count\", {\n      error: (error as Error).message,\n    });\n    return 0;\n  }\n};\n\n// Database import/export functions optimized for large data sets\nexport const exportDatabase = (): string | null => {\n  try {\n    const db = getDatabase();\n\n    // Create a sanitized version for export\n    const sanitizedDb = {\n      ...db,\n      users: db.users.map((user) => ({\n        ...user,\n        passwordHash: \"[REDACTED]\", // Extra security for exports\n        salt: \"[REDACTED]\", // Extra security for exports\n        mfaSecret: user.mfaSecret ? \"[REDACTED]\" : undefined,\n      })),\n    };\n\n    return JSON.stringify(sanitizedDb, null, 2);\n  } catch (error) {\n    logToSystem(\"error\", \"Error exporting database\", {\n      error: (error as Error).message,\n    });\n    return null;\n  }\n};\n\n// Import with integrity checks and validation\nexport const importDatabase = (jsonData: string): boolean => {\n  try {\n    const importedDb = JSON.parse(jsonData) as Database;\n\n    // Extensive validation\n    if (!importedDb || typeof importedDb !== \"object\") {\n      logToSystem(\n        \"error\",\n        \"Invalid database format during import - not an object\"\n      );\n      return false;\n    }\n\n    if (!importedDb.users || !Array.isArray(importedDb.users)) {\n      logToSystem(\n        \"error\",\n        \"Invalid database format during import - users not found or not an array\"\n      );\n      return false;\n    }\n\n    if (typeof importedDb.schemaVersion !== \"number\") {\n      logToSystem(\n        \"error\",\n        \"Invalid database format during import - schema version missing\"\n      );\n      return false;\n    }\n\n    // Check each user for required fields\n    for (const user of importedDb.users) {\n      if (!user.id || !user.email || !user.role || !user.createdAt) {\n        logToSystem(\"error\", \"Invalid user data during import\", { user });\n        return false;\n      }\n    }\n\n    // Merge strategy: keep existing users, add new ones\n    const currentDb = getDatabase();\n    const existingIds = new Set(currentDb.users.map((user) => user.id));\n    const existingEmails = new Set(\n      currentDb.users.map((user) => user.email.toLowerCase())\n    );\n\n    // Filter out users that already exist\n    const newUsers = importedDb.users.filter(\n      (importedUser: UserRecord) =>\n        !existingIds.has(importedUser.id) &&\n        !existingEmails.has(importedUser.email.toLowerCase())\n    );\n\n    // For security and HIPAA compliance, verify imported admin users\n    newUsers.forEach((user) => {\n      if (\n        user.role === \"admin\" &&\n        user.email.toLowerCase() !== \"keeseetyler@yahoo.com\"\n      ) {\n        // Downgrade non-authorized admin users for security\n        user.role = \"user\";\n        logToSystem(\"warning\", \"Downgraded imported admin to regular user\", {\n          email: user.email,\n        });\n      }\n    });\n\n    // Add new users to database\n    currentDb.users = [...currentDb.users, ...newUsers];\n\n    const saved = saveDatabase(currentDb);\n    if (saved) {\n      logToSystem(\"info\", \"Database imported successfully\", {\n        newUsersCount: newUsers.length,\n        totalUsers: currentDb.users.length,\n      });\n    }\n\n    return saved;\n  } catch (error) {\n    logToSystem(\"error\", \"Error importing database\", {\n      error: (error as Error).message,\n    });\n    return false;\n  }\n};\n\n// Function to update a user's role to admin with enhanced security checks\nexport const makeUserAdmin = (email: string): boolean => {\n  try {\n    // Get database\n    const db = getDatabase();\n\n    // Find user by email\n    const userIndex = db.users.findIndex(\n      (u) => u.email.toLowerCase() === email.toLowerCase()\n    );\n\n    if (userIndex === -1) {\n      console.error(`User with email ${email} not found`);\n\n      // Create admin user if it doesn't exist\n      if (isAdminEmail(email.toLowerCase())) {\n        const { hash, salt } = hashPassword(\"tempPassword123!\");\n        const now = Date.now();\n\n        const newAdminUser: UserRecord = {\n          id: nanoid(),\n          email,\n          passwordHash: hash,\n          salt,\n          role: \"admin\",\n          createdAt: now,\n          passwordLastChanged: now,\n          passwordHistory: [{ hash, salt, timestamp: now }],\n          failedLoginAttempts: 0,\n          mfaEnabled: false,\n          metadata: {},\n        };\n\n        db.users.push(newAdminUser);\n        userEmailIndex.set(email.toLowerCase(), newAdminUser.id);\n\n        saveDatabase(db);\n\n        console.log(`Created new admin user ${email}`);\n        return true;\n      }\n\n      return false;\n    }\n\n    // Update user role to admin\n    db.users[userIndex].role = \"admin\";\n\n    // Save database\n    saveDatabase(db);\n\n    // Force refresh of cached user data\n    databaseLoaded = false;\n    rebuildIndexes(db);\n\n    // Update current user if this is the logged-in user\n    if (db.currentUser === db.users[userIndex].id) {\n      // Update cached user\n      currentUserCache = db.users[userIndex];\n\n      // Update local storage for immediate effect\n      localStorage.setItem(\"auth_user\", JSON.stringify(db.users[userIndex]));\n    }\n\n    // Log the action\n    logToSystem(\"info\", \"user_role_changed\", {\n      email: email,\n      role: \"admin\",\n    });\n\n    console.log(`User ${email} is now an admin`);\n    return true;\n  } catch (error) {\n    console.error(\"Failed to make user admin:\", error);\n    return false;\n  }\n};\n\n// New functions for multi-factor authentication\nexport const enableMFA = (\n  userId: string,\n  secret: string,\n  recoveryCodes: string[] = []\n): boolean => {\n  try {\n    const db = getDatabase();\n    const userIndex = db.users.findIndex((u) => u.id === userId);\n\n    if (userIndex === -1) {\n      console.warn(`User with ID ${userId} not found for MFA enablement`);\n      return false;\n    }\n\n    // Update user's MFA settings\n    db.users[userIndex].mfaEnabled = true;\n    db.users[userIndex].mfaSecret = secret; // This should be the encrypted secret\n\n    // Store recovery codes if provided\n    if (recoveryCodes && recoveryCodes.length > 0) {\n      db.users[userIndex].recoveryCodes = recoveryCodes;\n    }\n\n    // Add audit log\n    const log: LogRecord = {\n      id: nanoid(),\n      timestamp: Date.now(),\n      level: \"info\",\n      user: db.users[userIndex].email,\n      action: \"MFA enabled\",\n      details: { userId },\n    };\n\n    const logs = loadLogs();\n    logs.unshift(log);\n    saveLogs(logs);\n\n    // Save the updated database\n    saveDatabase(db);\n\n    console.info(`MFA enabled for user ${db.users[userIndex].email}`);\n    return true;\n  } catch (error) {\n    console.error(\"Error enabling MFA:\", error);\n    return false;\n  }\n};\n\nexport const disableMFA = (userId: string): boolean => {\n  try {\n    const db = getDatabase();\n    const user = db.users.find((u) => u.id === userId);\n\n    if (!user) {\n      logToSystem(\"error\", \"Failed to disable MFA - user not found\", {\n        userId,\n      });\n      return false;\n    }\n\n    user.mfaEnabled = false;\n    user.mfaSecret = undefined;\n\n    // Update cache if this is the current user\n    if (currentUserCache && currentUserCache.id === userId) {\n      currentUserCache.mfaEnabled = false;\n      currentUserCache.mfaSecret = undefined;\n    }\n\n    saveDatabase(db);\n    logToSystem(\"info\", \"MFA disabled for user\", { email: user.email });\n\n    return true;\n  } catch (error) {\n    logToSystem(\"error\", \"Error disabling MFA\", {\n      error: (error as Error).message,\n      userId,\n    });\n    return false;\n  }\n};\n\n// Change password with history checking\nexport const changePassword = (\n  userId: string,\n  currentPassword: string,\n  newPassword: string\n): boolean | string => {\n  try {\n    const db = getDatabase();\n    const user = db.users.find((u) => u.id === userId);\n\n    if (!user) {\n      logToSystem(\"error\", \"Failed to change password - user not found\", {\n        userId,\n      });\n      return \"User not found\";\n    }\n\n    // Verify current password\n    if (!verifyPassword(currentPassword, user.passwordHash, user.salt)) {\n      logToSystem(\n        \"warning\",\n        \"Password change failed - current password incorrect\",\n        {\n          email: user.email,\n        }\n      );\n      return \"Current password is incorrect\";\n    }\n\n    // Validate new password against policy\n    const passwordValidation = validatePassword(\n      newPassword,\n      DEFAULT_PASSWORD_POLICY\n    );\n    if (!passwordValidation.valid) {\n      logToSystem(\"warning\", \"Password change failed - policy violation\", {\n        email: user.email,\n        reason: passwordValidation.message,\n      });\n      return (\n        passwordValidation.message || \"Password does not meet requirements\"\n      );\n    }\n\n    // Check password history to prevent reuse\n    if (user.passwordHistory && user.passwordHistory.length > 0) {\n      for (const historyEntry of user.passwordHistory) {\n        if (verifyPassword(newPassword, historyEntry.hash, historyEntry.salt)) {\n          logToSystem(\"warning\", \"Password change failed - password reuse\", {\n            email: user.email,\n          });\n          return \"Cannot reuse a previous password\";\n        }\n      }\n    }\n\n    // Generate new password hash\n    const { hash, salt } = hashPassword(newPassword);\n\n    // Update password\n    user.passwordHash = hash;\n    user.salt = salt;\n    user.passwordLastChanged = Date.now();\n\n    // Update password history\n    if (!user.passwordHistory) {\n      user.passwordHistory = [];\n    }\n\n    // Add new password to history\n    user.passwordHistory.unshift({\n      hash,\n      salt,\n      timestamp: Date.now(),\n    });\n\n    // Trim history to configured size\n    if (user.passwordHistory.length > DEFAULT_PASSWORD_POLICY.HISTORY_SIZE) {\n      user.passwordHistory.length = DEFAULT_PASSWORD_POLICY.HISTORY_SIZE;\n    }\n\n    // Update cache if this is the current user\n    if (currentUserCache && currentUserCache.id === userId) {\n      currentUserCache.passwordHash = hash;\n      currentUserCache.salt = salt;\n      currentUserCache.passwordLastChanged = user.passwordLastChanged;\n      currentUserCache.passwordHistory = user.passwordHistory;\n    }\n\n    saveDatabase(db);\n    logToSystem(\"info\", \"Password changed for user\", { email: user.email });\n\n    return true;\n  } catch (error) {\n    logToSystem(\"error\", \"Error changing password\", {\n      error: (error as Error).message,\n      userId,\n    });\n    return \"An error occurred while changing password\";\n  }\n};\n\n// Performance metrics for monitoring\nexport const getDatabaseStats = async (): Promise<{\n  userCount: number;\n  adminCount: number;\n  mfaEnabledCount: number;\n  logCount: number;\n  dbSizeKB: number;\n}> => {\n  try {\n    const db = getDatabase();\n    const logs = loadLogs();\n\n    return {\n      userCount: db.users.length,\n      adminCount: db.users.filter((u) => u.role === \"admin\").length,\n      mfaEnabledCount: db.users.filter((u) => u.mfaEnabled).length,\n      logCount: logs.length,\n      dbSizeKB: JSON.stringify(db).length / 1024,\n    };\n  } catch (error) {\n    console.error(\"Error getting database stats:\", error);\n    return {\n      userCount: 0,\n      adminCount: 0,\n      mfaEnabledCount: 0,\n      logCount: 0,\n      dbSizeKB: 0,\n    };\n  }\n};\n\n// Initialize database if needed with performance optimizations\nexport const initializeDatabase = (): void => {\n  // Only initialize if not already loaded\n  if (!databaseLoaded) {\n    const db = getDatabase();\n\n    // If database is new or empty, set up initial data\n    if (db.users.length === 0) {\n      logToSystem(\"info\", \"Database initialized\");\n\n      // Create default admin account\n      console.log(\"Creating default admin account\");\n      const { hash, salt } = hashPassword(DEFAULT_ADMIN_PASSWORD);\n\n      const adminUser: UserRecord = {\n        id: crypto.randomUUID ? crypto.randomUUID() : `admin-${Date.now()}`,\n        email: DEFAULT_ADMIN_EMAIL,\n        passwordHash: hash,\n        salt: salt,\n        role: \"admin\",\n        createdAt: Date.now(),\n        mfaEnabled: false,\n        passwordLastChanged: Date.now(),\n        name: \"System Administrator\",\n      };\n\n      db.users.push(adminUser);\n\n      // Add initial audit log\n      db.auditLogs.push({\n        id: crypto.randomUUID ? crypto.randomUUID() : `log-${Date.now()}`,\n        timestamp: Date.now(),\n        action: \"system_init\",\n        level: \"info\",\n        details: { message: \"System initialized with default admin account\" },\n      });\n    } else {\n      // Check if admin account exists, if not create it\n      const adminExists = db.users.some(\n        (user) => user.email.toLowerCase() === DEFAULT_ADMIN_EMAIL.toLowerCase()\n      );\n\n      if (!adminExists) {\n        console.log(\"Adding missing admin account\");\n        const { hash, salt } = hashPassword(DEFAULT_ADMIN_PASSWORD);\n\n        const adminUser: UserRecord = {\n          id: crypto.randomUUID ? crypto.randomUUID() : `admin-${Date.now()}`,\n          email: DEFAULT_ADMIN_EMAIL,\n          passwordHash: hash,\n          salt: salt,\n          role: \"admin\",\n          createdAt: Date.now(),\n          mfaEnabled: false,\n          passwordLastChanged: Date.now(),\n          name: \"System Administrator\",\n        };\n\n        db.users.push(adminUser);\n\n        db.auditLogs.push({\n          id: crypto.randomUUID ? crypto.randomUUID() : `log-${Date.now()}`,\n          timestamp: Date.now(),\n          action: \"admin_account_added\",\n          level: \"info\",\n          details: { message: \"Default admin account created\" },\n        });\n      }\n    }\n\n    // Save updates\n    saveDatabase(db);\n\n    // Mark as initialized\n    databaseLoaded = true;\n  }\n};\n\n// Initialize on module load\ninitializeDatabase();\n\n// New functions for auditing\nexport const addAuditLog = async (\n  log: Partial<AuditLog>\n): Promise<AuditLog> => {\n  try {\n    // Get database\n    const db = await getDatabase();\n\n    if (!log.action) {\n      throw new Error(\"Audit log must have an action\");\n    }\n\n    // Create new log entry with auto-generated ID if not provided\n    const newLog: AuditLog = {\n      id: log.id || nanoid(),\n      userId: log.userId,\n      timestamp: log.timestamp || Date.now(),\n      action: log.action,\n      level: log.level || \"info\",\n      details: log.details || {},\n    };\n\n    // Add to database\n    db.auditLogs.push(newLog);\n\n    // Keep the logs under a reasonable size (limit to last 1000)\n    if (db.auditLogs.length > 1000) {\n      db.auditLogs = db.auditLogs.slice(-1000);\n    }\n\n    // Save database\n    await saveDatabase(db);\n\n    return newLog;\n  } catch (error) {\n    console.error(\"Error adding audit log:\", error);\n    throw error;\n  }\n};\n\nexport const getAuditLogs = async (options?: {\n  userId?: string;\n  level?: \"info\" | \"warning\" | \"error\";\n  action?: string;\n  startTime?: number;\n  endTime?: number;\n  limit?: number;\n  offset?: number;\n}): Promise<{ logs: AuditLog[]; total: number }> => {\n  const db = await getDatabase();\n  let logs = [...db.auditLogs];\n\n  // Apply filters\n  if (options?.userId) {\n    logs = logs.filter((log) => log.userId === options.userId);\n  }\n\n  if (options?.level) {\n    logs = logs.filter((log) => log.level === options.level);\n  }\n\n  if (options?.action) {\n    logs = logs.filter((log) => log.action.includes(options.action!));\n  }\n\n  if (options?.startTime) {\n    logs = logs.filter((log) => log.timestamp >= options.startTime!);\n  }\n\n  if (options?.endTime) {\n    logs = logs.filter((log) => log.timestamp <= options.endTime!);\n  }\n\n  // Sort by timestamp (newest first)\n  logs.sort((a, b) => b.timestamp - a.timestamp);\n\n  // Get total count before pagination\n  const total = logs.length;\n\n  // Apply pagination\n  if (options?.offset !== undefined && options?.limit !== undefined) {\n    logs = logs.slice(options.offset, options.offset + options.limit);\n  } else if (options?.limit !== undefined) {\n    logs = logs.slice(0, options.limit);\n  }\n\n  return { logs, total };\n};\n\nexport const updateUser = (\n  userId: string,\n  userData: Partial<UserRecord>\n): UserRecord | undefined => {\n  try {\n    const db = getDatabase();\n    const userIndex = db.users.findIndex((u) => u.id === userId);\n\n    if (userIndex === -1) {\n      return undefined;\n    }\n\n    // Update user data\n    db.users[userIndex] = {\n      ...db.users[userIndex],\n      ...userData,\n    };\n\n    saveDatabase(db);\n\n    // Return updated user\n    return db.users[userIndex];\n  } catch (error) {\n    logToSystem(\"error\", \"Error updating user\", {\n      error: (error as Error).message,\n      userId,\n    });\n    return undefined;\n  }\n};\n\nexport const deleteUser = async (userId: string): Promise<boolean> => {\n  const db = await getDatabase();\n  const userIndex = db.users.findIndex((u) => u.id === userId);\n\n  if (userIndex === -1) {\n    return false;\n  }\n\n  // Store user's email for logging\n  const email = db.users[userIndex].email;\n\n  // Remove user\n  db.users.splice(userIndex, 1);\n\n  // Save database\n  await saveDatabase(db);\n\n  // Log deletion\n  await addAuditLog({\n    action: \"user_deleted\",\n    timestamp: Date.now(),\n    level: \"warning\",\n    details: { userId, email },\n  });\n\n  return true;\n};\n\n// Delete all accounts and reset the database\nexport const deleteAllAccounts = (): boolean => {\n  try {\n    console.log(\"Deleting all accounts and resetting database...\");\n\n    // Create a fresh database\n    const freshDb: Database = {\n      users: [],\n      currentUser: null,\n      schemaVersion: 1,\n      lastUpdated: Date.now(),\n      auditLogs: [],\n      recoveryTokens: [],\n    };\n\n    // Save the fresh database\n    const success = saveDatabase(freshDb);\n\n    // Clear all indexes and caches\n    userEmailIndex.clear();\n    currentUserCache = null;\n    databaseLoaded = false;\n\n    // Also clear any logs\n    saveLogs([]);\n\n    // Clear any stored user data in localStorage\n    localStorage.removeItem(\"auth_user\");\n    localStorage.removeItem(\"auth_session_expiry\");\n\n    console.log(\"Database reset successfully!\");\n    return success;\n  } catch (error) {\n    console.error(\"Error resetting database:\", error);\n    return false;\n  }\n};\n\n// A specialized function to ensure admin access without normal authentication checks\nexport const ensureAdminAccess = (email: string): UserRecord | null => {\n  // This only works for the designated admin email\n  if (email.toLowerCase().trim() !== \"keeseetyler@yahoo.com\") {\n    return null;\n  }\n\n  try {\n    const db = getDatabase();\n    const emailLower = email.toLowerCase().trim();\n\n    // Try to find existing admin user\n    const userId = userEmailIndex.get(emailLower);\n    let user = userId ? db.users.find((u) => u.id === userId) : null;\n\n    // If user doesn't exist, create a new admin\n    if (!user) {\n      console.log(`Creating emergency admin account for ${email}`);\n\n      // Use a default password\n      const { hash, salt } = hashPassword(\"admin123\");\n      const now = Date.now();\n\n      const newAdminUser: UserRecord = {\n        id: nanoid(),\n        email,\n        passwordHash: hash,\n        salt,\n        role: \"admin\",\n        createdAt: now,\n        passwordLastChanged: now,\n        passwordHistory: [{ hash, salt, timestamp: now }],\n        failedLoginAttempts: 0,\n        mfaEnabled: false,\n        metadata: {},\n      };\n\n      db.users.push(newAdminUser);\n      userEmailIndex.set(emailLower, newAdminUser.id);\n\n      // Update user cache and current user\n      currentUserCache = newAdminUser;\n      db.currentUser = newAdminUser.id;\n\n      saveDatabase(db);\n      logToSystem(\"info\", \"Emergency admin account created\", { email });\n\n      return newAdminUser;\n    }\n\n    // If user exists, ensure they're an admin\n    if (user.role !== \"admin\") {\n      user.role = \"admin\";\n      saveDatabase(db);\n      logToSystem(\"info\", \"User promoted to admin\", { email });\n    }\n\n    // Update current user\n    db.currentUser = user.id;\n    currentUserCache = user;\n    saveDatabase(db);\n\n    return user;\n  } catch (error) {\n    console.error(\"Error ensuring admin access:\", error);\n    return null;\n  }\n};\n\n// Function to detect and fix database corruption that might prevent login\nexport const repairDatabase = (): boolean => {\n  try {\n    console.log(\"Checking database for corruption...\");\n\n    // Get the current database\n    const db = getDatabase();\n    let wasRepaired = false;\n\n    // Check if user indexes are consistent with the actual users\n    db.users.forEach((user) => {\n      const emailLower = user.email.toLowerCase();\n      const indexedId = userEmailIndex.get(emailLower);\n\n      // If user is not properly indexed or index points to wrong ID, fix it\n      if (!indexedId || indexedId !== user.id) {\n        console.log(`Fixing index for user: ${user.email}`);\n        userEmailIndex.set(emailLower, user.id);\n        wasRepaired = true;\n      }\n\n      // Ensure user has required fields\n      if (!user.role) {\n        console.log(`Fixing missing role for user: ${user.email}`);\n        user.role =\n          user.email.toLowerCase() === \"keeseetyler@yahoo.com\"\n            ? \"admin\"\n            : \"user\";\n        wasRepaired = true;\n      }\n\n      // Ensure passwordHash and salt exist\n      if (!user.passwordHash || !user.salt) {\n        console.log(`Fixing missing password hash for user: ${user.email}`);\n        const { hash, salt } = hashPassword(\"default123\");\n        user.passwordHash = hash;\n        user.salt = salt;\n        wasRepaired = true;\n      }\n\n      // Handle the specific admin user\n      if (\n        user.email.toLowerCase() === \"keeseetyler@yahoo.com\" &&\n        user.role !== \"admin\"\n      ) {\n        console.log(`Ensuring admin role for ${user.email}`);\n        user.role = \"admin\";\n        wasRepaired = true;\n      }\n    });\n\n    // Check for admin user\n    const adminEmail = \"keeseetyler@yahoo.com\";\n    const adminId = userEmailIndex.get(adminEmail.toLowerCase());\n    const adminExists = !!adminId && db.users.some((u) => u.id === adminId);\n\n    // Create admin user if it doesn't exist\n    if (!adminExists) {\n      console.log(\"Creating missing admin user\");\n      const { hash, salt } = hashPassword(\"admin123\");\n      const now = Date.now();\n\n      const newAdminUser: UserRecord = {\n        id: nanoid(),\n        email: adminEmail,\n        passwordHash: hash,\n        salt,\n        role: \"admin\",\n        createdAt: now,\n        passwordLastChanged: now,\n        passwordHistory: [{ hash, salt, timestamp: now }],\n        failedLoginAttempts: 0,\n        mfaEnabled: false,\n        metadata: {},\n      };\n\n      db.users.push(newAdminUser);\n      userEmailIndex.set(adminEmail.toLowerCase(), newAdminUser.id);\n      wasRepaired = true;\n    }\n\n    // Save if repairs were made\n    if (wasRepaired) {\n      console.log(\"Database repaired successfully\");\n      saveDatabase(db);\n      return true;\n    }\n\n    console.log(\"No database repairs needed\");\n    return false;\n  } catch (error) {\n    console.error(\"Error repairing database:\", error);\n    return false;\n  }\n};\n\n// Define system settings interface\nexport interface SystemSettings {\n  requireMfa: boolean;\n  enforcePasswordPolicy: boolean;\n  enablePasswordless: boolean;\n  logFailedLogins: boolean;\n  lockAccountAfterFailures: boolean;\n  sessionTimeout: number;\n  enableDetailedLogs: boolean;\n  retainLogsForDays: number;\n  enableAuditAlerts: boolean;\n  enableSsoIntegration: boolean;\n  apiRateLimit: number;\n  enableAnalytics: boolean;\n}\n\n// Default system settings\nexport const defaultSystemSettings: SystemSettings = {\n  requireMfa: false,\n  enforcePasswordPolicy: false,\n  enablePasswordless: false,\n  logFailedLogins: true,\n  lockAccountAfterFailures: false,\n  sessionTimeout: 60,\n  enableDetailedLogs: true,\n  retainLogsForDays: 365,\n  enableAuditAlerts: false,\n  enableSsoIntegration: false,\n  apiRateLimit: 100,\n  enableAnalytics: false,\n};\n\n// Storage key for system settings\nconst SYSTEM_SETTINGS_KEY = \"admin_system_settings\";\n\n/**\n * Get system settings\n * @returns Current system settings\n */\nexport const getSystemSettings = (): SystemSettings => {\n  try {\n    const storedSettings = localStorage.getItem(SYSTEM_SETTINGS_KEY);\n    if (storedSettings) {\n      return JSON.parse(storedSettings);\n    }\n    return defaultSystemSettings;\n  } catch (error) {\n    console.error(\"Error retrieving system settings:\", error);\n    return defaultSystemSettings;\n  }\n};\n\n/**\n * Save system settings\n * @param settings System settings to save\n * @returns Success status\n */\nexport const saveSystemSettings = (settings: SystemSettings): boolean => {\n  try {\n    localStorage.setItem(SYSTEM_SETTINGS_KEY, JSON.stringify(settings));\n    // Log audit event for settings change\n    logAction(\"system_settings_updated\", {\n      updatedBy: getCurrentUser()?.email || \"unknown\",\n      settings,\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Error saving system settings:\", error);\n    return false;\n  }\n};\n\n// Utility to check if a feature is enabled in system settings\nexport const isFeatureEnabled = (feature: keyof SystemSettings): boolean => {\n  const settings = getSystemSettings();\n  if (typeof settings[feature] === \"boolean\") {\n    return settings[feature] as boolean;\n  }\n  return false;\n};\n","import { simulateApiCall } from \"./api/apiUtils\";\nimport { getUserByEmail } from \"./database\";\n\n/**\n * Check if MFA is required for a user based on their email\n * @param email User email to check\n * @returns Promise<boolean> - True if MFA is required\n */\nexport const checkMfaRequired = async (email: string): Promise<boolean> => {\n  // Get user record\n  const user = getUserByEmail(email);\n\n  // If user has MFA enabled, require it\n  if (user?.mfaEnabled) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Verify an MFA token for a user\n * @param email User email\n * @param token MFA token to verify\n * @returns Promise<boolean> - True if token is valid\n */\nexport const verifyMfaToken = async (\n  email: string,\n  token: string\n): Promise<boolean> => {\n  // In a real app, this would verify the token against the user's MFA secret\n  // For demo, we'll accept any 6-digit code\n  if (token.length !== 6 || !/^\\d+$/.test(token)) {\n    return false;\n  }\n\n  // Simulate API call with 90% success rate\n  try {\n    return await simulateApiCall(true, 800);\n  } catch (error) {\n    console.error(\"MFA verification error:\", error);\n    return false;\n  }\n};\n\nexport default {\n  checkMfaRequired,\n  verifyMfaToken,\n};\n","import React, { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AuthEventType, trackAuthEvent } from '../utils/analytics/authAnalytics';\nimport { simulateApiCall } from '../utils/api/apiUtils';\nimport { checkMfaRequired } from '../utils/auth';\nimport {\n    UserRecord,\n    addAuditLog,\n    authenticateUser,\n    createUser,\n    getCurrentUser,\n    logAction,\n    updateUser as updateUserInDb\n} from '../utils/database';\n\n// Define the user type\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  isAdmin: boolean;\n  role?: string;\n  mfaEnabled?: boolean;\n  createdAt?: number;\n  ssoProvider?: string;\n}\n\n// Define login result type\ninterface LoginResult {\n  success: boolean;\n  user?: User;\n  error?: string;\n  requiresMfa?: boolean;\n}\n\n// Define registration result type\ninterface RegisterResult {\n  success: boolean;\n  user?: User;\n  error?: string;\n}\n\n// Define passwordless result type\ninterface PasswordlessResult {\n  success: boolean;\n  requestId?: string;\n  error?: string;\n}\n\n// Auth context type with proper typing for all functions\ntype AuthContextType = {\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n  login: (email: string, password: string) => Promise<LoginResult>;\n  logout: () => void;\n  register: (email: string, password: string, name?: string) => Promise<RegisterResult>;\n  updateUser: (userData: Partial<User>) => Promise<void>;\n  refreshUser: () => Promise<void>;\n  checkMfaRequired: (email: string) => Promise<boolean>;\n  sendPasswordRecoveryEmail: (email: string) => Promise<{success: boolean; error?: string}>;\n  resetPassword: (email: string) => Promise<{ success: boolean; message: string }>;\n  verifyResetToken: (token: string) => Promise<boolean>;\n  confirmPasswordReset: (token: string, newPassword: string) => Promise<boolean>;\n  getSessionTimeRemaining: () => number;\n  extendSession: () => void;\n  // Passwordless authentication methods\n  startPasswordlessLogin: (email: string, method: string) => Promise<LoginResult>;\n  verifyPasswordlessCode: (email: string, code: string, method: string) => Promise<LoginResult>;\n  // SSO methods\n  getSSOProviders: () => any[];\n  initiateSSOLogin: (providerId: string) => Promise<{url: string | null; success?: boolean; error?: string}>;\n  handleSSOCallback: (providerId: string, data: any) => Promise<LoginResult>;\n};\n\n// Default empty context\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  loading: false,\n  error: null,\n  isAuthenticated: false,\n  isAdmin: false,\n  login: async () => ({ success: false, error: 'Not implemented' }),\n  logout: () => {},\n  register: async () => ({ success: false, error: 'Not implemented' }),\n  updateUser: async () => {},\n  refreshUser: async () => {},\n  checkMfaRequired: async () => false,\n  sendPasswordRecoveryEmail: async () => ({ success: false, error: 'Not implemented' }),\n  resetPassword: async () => ({ success: false, message: 'Not implemented' }),\n  verifyResetToken: async () => false,\n  confirmPasswordReset: async () => false,\n  getSessionTimeRemaining: () => 0,\n  extendSession: () => {},\n  startPasswordlessLogin: async () => ({ success: false, error: 'Not implemented' }),\n  verifyPasswordlessCode: async () => ({ success: false, error: 'Not implemented' }),\n  getSSOProviders: () => [],\n  initiateSSOLogin: async () => ({ url: null, error: 'Not implemented' }),\n  handleSSOCallback: async () => ({ success: false, error: 'Not implemented' }),\n});\n\n// Session duration in milliseconds (1 hour)\nconst SESSION_DURATION = 60 * 60 * 1000;\n\n// Auth provider component\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [sessionExpiry, setSessionExpiry] = useState<number | null>(null);\n  \n  // Use useRef to store the current auth status for timer callbacks\n  const userRef = useRef<User | null>(null);\n  const sessionExpiryRef = useRef<number | null>(null);\n\n  // Keep refs in sync with state\n  useEffect(() => {\n    userRef.current = user;\n    sessionExpiryRef.current = sessionExpiry;\n  }, [user, sessionExpiry]);\n\n  // Define logout function with useCallback to avoid circular dependencies\n  const logout = useCallback(() => {\n    console.log('Logging out user...');\n    // Track logout event if user exists\n    if (userRef.current) {\n      trackAuthEvent(AuthEventType.LOGOUT, {\n        userId: userRef.current.id,\n        timestamp: new Date().toISOString(),\n      });\n    }\n    \n    // Clear user data\n    setUser(null);\n    setSessionExpiry(null);\n    \n    // Clear any stored tokens\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('sessionExpiry');\n    \n    console.log('Logout completed');\n  }, []);\n\n  // Initialize from localStorage\n  useEffect(() => {\n    console.log('Initializing auth state from localStorage');\n    const storedSessionExpiry = localStorage.getItem('sessionExpiry');\n    const storedUser = localStorage.getItem('authUser');\n    \n    if (storedSessionExpiry && storedUser) {\n      const expiryTime = parseInt(storedSessionExpiry, 10);\n      \n      // Check if session is still valid\n      if (expiryTime > Date.now()) {\n        try {\n          const userData = JSON.parse(storedUser);\n          setUser(userData);\n          setSessionExpiry(expiryTime);\n          console.log('Restored user session from localStorage');\n        } catch (e) {\n          console.error('Error parsing stored user data:', e);\n          localStorage.removeItem('authUser');\n          localStorage.removeItem('sessionExpiry');\n        }\n      } else {\n        // Session expired\n        console.log('Stored session expired, cleaning up');\n        localStorage.removeItem('authUser');\n        localStorage.removeItem('sessionExpiry');\n      }\n    }\n  }, []);\n\n  // Check for session expiry\n  useEffect(() => {\n    console.log('Setting up session expiry timer');\n    \n    // Function to check if session is expired\n    const checkExpiry = () => {\n      const currentExpiry = sessionExpiryRef.current;\n      const currentUser = userRef.current;\n      \n      console.log('Checking session expiry:', currentExpiry, 'Current time:', Date.now());\n      \n      if (currentUser && currentExpiry && currentExpiry < Date.now()) {\n        console.log('Session expired, logging out');\n        logout();\n        return true;\n      }\n      return false;\n    };\n    \n    // Initial check\n    checkExpiry();\n    \n    // Set up interval to check session expiry\n    const interval = setInterval(checkExpiry, 60000); // Check every minute\n    \n    return () => {\n      clearInterval(interval);\n    };\n  }, [logout]);\n\n  // Function to check if session is expired\n  const checkSessionExpiry = useCallback(() => {\n    if (sessionExpiry && sessionExpiry < Date.now()) {\n      logout();\n      return true;\n    }\n    return false;\n  }, [sessionExpiry, logout]);\n\n  // Login function\n  const login = async (email: string, password: string): Promise<LoginResult> => {\n    setLoading(true);\n    setError(null);\n\n    // Track login attempt\n    trackAuthEvent(AuthEventType.LOGIN_ATTEMPT, {\n      email,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // Check if MFA is required but not provided\n      if (await checkMfaRequired(email) && !password) {\n        console.log('MFA is required for this account');\n        setLoading(false);\n        return {\n          success: false,\n          error: 'MFA required',\n          requiresMfa: true\n        };\n      }\n\n      // Authenticate using the database\n      const userRecord = authenticateUser(email, password);\n      \n      if (!userRecord) {\n        setLoading(false);\n        return {\n          success: false,\n          error: 'Invalid email or password'\n        };\n      }\n      \n      // Convert user record to context user\n      const authUser = convertUserRecord(userRecord);\n      \n      console.log('AuthProvider: Login successful, user:', authUser);\n      setUser(authUser);\n      setSessionExpiry(Date.now() + SESSION_DURATION); // 1 hour from now\n      \n      // Log the successful login\n      logAction('user_login', { email: authUser.email, userId: authUser.id });\n      \n      // Track successful login\n      if (authUser.isAdmin) {\n        trackAuthEvent(AuthEventType.ADMIN_LOGIN, {\n          userId: authUser.id,\n          timestamp: new Date().toISOString(),\n        });\n      } else {\n        trackAuthEvent(AuthEventType.LOGIN_SUCCESS, {\n          userId: authUser.id,\n          timestamp: new Date().toISOString(),\n        });\n      }\n      \n      // Store in localStorage\n      localStorage.setItem('authToken', 'demo-token-' + authUser.id);\n      localStorage.setItem('sessionExpiry', (Date.now() + SESSION_DURATION).toString());\n      localStorage.setItem('authUser', JSON.stringify(authUser));\n      \n      setLoading(false);\n      \n      return {\n        success: true,\n        user: authUser\n      };\n    } catch (err) {\n      console.error('Login error:', err);\n      const errorMessage = 'Login failed. Please check your credentials and try again.';\n      setError(errorMessage);\n      setLoading(false);\n\n      // Track login error\n      trackAuthEvent(AuthEventType.LOGIN_ERROR, {\n        email,\n        timestamp: new Date().toISOString(),\n        error: errorMessage,\n      });\n\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async (email: string, password: string, name?: string): Promise<RegisterResult> => {\n    console.log(`AuthProvider: Register attempt for ${email}`);\n    setError(null);\n    setLoading(true);\n    \n    try {\n      // Create user in the database\n      const userRecord = createUser(email, password);\n      \n      if (!userRecord) {\n        setLoading(false);\n        return {\n          success: false,\n          error: 'Registration failed. Please try again.'\n        };\n      }\n      \n      // If name was provided, update the user record\n      if (name) {\n        // Update user metadata to include name\n        const updatedRecord: Partial<UserRecord> = {\n          name: name,\n          metadata: { ...userRecord.metadata, displayName: name }\n        };\n        updateUserInDb(userRecord.id, updatedRecord);\n      }\n      \n      // Convert user record to context user\n      const authUser = convertUserRecord(userRecord);\n      \n      console.log('AuthProvider: Registration successful, user:', authUser);\n      setUser(authUser);\n      setSessionExpiry(Date.now() + SESSION_DURATION); // 1 hour from now\n      \n      // Log the registration\n      logAction('user_register', { email: authUser.email, userId: authUser.id });\n      \n      // Track successful signup\n      trackAuthEvent(AuthEventType.SIGNUP_SUCCESS, {\n        userId: authUser.id,\n        timestamp: new Date().toISOString(),\n      });\n      \n      // Store in localStorage\n      localStorage.setItem('authToken', 'demo-token-' + authUser.id);\n      localStorage.setItem('sessionExpiry', (Date.now() + SESSION_DURATION).toString());\n      localStorage.setItem('authUser', JSON.stringify(authUser));\n      \n      setLoading(false);\n      \n      return {\n        success: true,\n        user: authUser\n      };\n    } catch (err) {\n      console.error('Registration error:', err);\n      const errorMessage = 'Registration failed. Please try again later.';\n      setError(errorMessage);\n      setLoading(false);\n\n      // Track signup error\n      trackAuthEvent(AuthEventType.SIGNUP_ERROR, {\n        email,\n        timestamp: new Date().toISOString(),\n        error: errorMessage,\n      });\n\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Update user function\n  const updateUser = async (userData: Partial<User>) => {\n    if (!user) return;\n    console.log('Updating user:', userData);\n    \n    try {\n      // Convert to database format and update\n      const dbUserData: Partial<UserRecord> = {\n        ...userData,\n        role: userData.isAdmin ? 'admin' : 'user'\n      };\n      \n      // Update in database\n      const updatedUserRecord = await updateUserInDb(user.id, dbUserData);\n      \n      if (updatedUserRecord) {\n        const updatedUser = convertUserRecord(updatedUserRecord);\n        setUser(updatedUser);\n      }\n    } catch (err) {\n      console.error('Error updating user:', err);\n    }\n  };\n\n  // Refresh user data\n  const refreshUser = async () => {\n    console.log('Refreshing user data');\n    try {\n      const currentUserRecord = getCurrentUser();\n      if (currentUserRecord) {\n        setUser(convertUserRecord(currentUserRecord));\n      } else {\n        // No current user in database\n        setUser(null);\n      }\n    } catch (err) {\n      console.error('Error refreshing user data:', err);\n    }\n  };\n\n  // Password recovery functionality\n  const sendPasswordRecoveryEmail = async (email: string) => {\n    console.log('Password recovery requested for:', email);\n    try {\n      // In a real implementation, this would generate a token,\n      // store it securely, and send an email with a reset link\n      \n      // For demo purposes, we'll just log the action and return success\n      const token = Math.random().toString(36).substring(2, 15);\n      console.log(`Recovery token for ${email}: ${token}`);\n      \n      addAuditLog({\n        timestamp: Date.now(),\n        action: 'password_recovery_requested',\n        level: 'info',\n        details: { email }\n      });\n      \n      return { success: true };\n    } catch (err) {\n      console.error('Error sending recovery email:', err);\n      return { \n        success: false, \n        error: 'Failed to send recovery email. Please try again later.' \n      };\n    }\n  };\n\n  // Reset password function\n  const resetPassword = async (email: string): Promise<{ success: boolean; message: string }> => {\n    setLoading(true);\n    setError(null);\n\n    // Track password reset attempt\n    trackAuthEvent(AuthEventType.PASSWORD_RESET_REQUEST, {\n      email,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // Simulate API call with 1s delay\n      const result = await simulateApiCall<{ success: boolean; message: string }>(\n        {\n          success: true,\n          message: 'Password reset email sent. Please check your inbox.',\n        },\n        1000\n      );\n\n      setLoading(false);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      setLoading(false);\n      return {\n        success: false,\n        message: errorMessage,\n      };\n    }\n  };\n\n  // Verify reset token\n  const verifyResetToken = async (token: string): Promise<boolean> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Simulate API call with 1s delay\n      const result = await simulateApiCall<boolean>(true, 1000);\n      setLoading(false);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // Confirm password reset\n  const confirmPasswordReset = async (token: string, newPassword: string): Promise<boolean> => {\n    setLoading(true);\n    setError(null);\n\n    // Track password reset completion\n    trackAuthEvent(AuthEventType.PASSWORD_RESET_COMPLETE, {\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // Simulate API call with 1s delay\n      const result = await simulateApiCall<boolean>(true, 1000);\n      setLoading(false);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // Passwordless authentication methods\n  const startPasswordlessLogin = async (email: string, method: string): Promise<LoginResult> => {\n    console.log(`Initiating passwordless login for ${email} using ${method}`);\n    \n    try {\n      // In a real implementation, this would send an email or SMS\n      // For demo purposes, we'll simulate a successful request\n      \n      // Track the event\n      trackAuthEvent(AuthEventType.PASSWORDLESS_INITIATED, {\n        email,\n        method,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Return success with a mock requestId\n      // In a real implementation, this would be tracked serverside\n      return {\n        success: true,\n        error: undefined\n      };\n    } catch (err) {\n      console.error('Passwordless initiation error:', err);\n      \n      // Track the error\n      trackAuthEvent(AuthEventType.PASSWORDLESS_ERROR, {\n        email,\n        method,\n        error: (err as Error).message,\n        timestamp: new Date().toISOString()\n      });\n      \n      return {\n        success: false,\n        error: 'Failed to initiate passwordless login'\n      };\n    }\n  };\n\n  const verifyPasswordlessCode = async (email: string, code: string, method: string): Promise<LoginResult> => {\n    // Basic format check for the code\n    if (code.length !== 6 || !/^\\d+$/.test(code)) {\n      setError('Invalid verification code format');\n      return {\n        success: false,\n        error: 'Invalid verification code format',\n      };\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Simulate successful verification (in a real app, this would validate against the server)\n      const result = await simulateApiCall<LoginResult>(\n        {\n          success: true,\n          user: {\n            id: uuidv4(),\n            email,\n            name: 'Demo User',\n            isAdmin: false,\n            role: 'user',\n          },\n        },\n        1500\n      );\n\n      if (result.success && result.user) {\n        // Set session expiry\n        const expiry = Date.now() + SESSION_DURATION;\n        setSessionExpiry(expiry);\n        setUser(result.user);\n\n        // Store in localStorage\n        localStorage.setItem('authToken', 'demo-token-' + result.user.id);\n        localStorage.setItem('sessionExpiry', expiry.toString());\n        localStorage.setItem('authUser', JSON.stringify(result.user));\n\n        // Track successful passwordless login\n        trackAuthEvent(AuthEventType.PASSWORDLESS_SUCCESS, {\n          userId: result.user.id,\n          method,\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      setLoading(false);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      setLoading(false);\n\n      // Track passwordless verification error\n      trackAuthEvent(AuthEventType.PASSWORDLESS_ERROR, {\n        email,\n        method,\n        timestamp: new Date().toISOString(),\n        error: errorMessage,\n      });\n\n      return {\n        success: false,\n        error: errorMessage,\n      };\n    }\n  };\n\n  // SSO methods\n  const getSSOProviders = () => {\n    // Mock SSO providers for demo purposes\n    return [\n      {\n        id: \"google\",\n        name: \"Google Workspace\",\n        type: \"oauth2\",\n        enabled: true,\n        metadata: { clientId: \"mock-client-id\" }\n      },\n      {\n        id: \"microsoft\",\n        name: \"Microsoft Azure AD\",\n        type: \"oidc\",\n        enabled: true,\n        metadata: { clientId: \"mock-client-id\" }\n      },\n      {\n        id: \"okta\",\n        name: \"Okta SSO\",\n        type: \"saml\",\n        enabled: true,\n        metadata: { entityId: \"mock-entity-id\" }\n      },\n      {\n        id: \"github\",\n        name: \"GitHub\",\n        type: \"oauth2\",\n        enabled: true,\n        metadata: { clientId: \"mock-client-id\" }\n      }\n    ];\n  };\n\n  const initiateSSOLogin = async (providerId: string) => {\n    try {\n      console.log(`Initiating SSO login for provider: ${providerId}`);\n      \n      // In a real app, this would redirect to the SSO provider\n      // For demo, we'll simulate a successful login after a short delay\n      \n      // Import database functions\n      const { addAuditLog } = await import('../utils/database');\n      \n      // Record the SSO initiation in the audit log\n      await addAuditLog({\n        timestamp: Date.now(),\n        action: 'sso_initiated',\n        level: 'info',\n        details: {\n          provider: providerId\n        }\n      });\n      \n      // Track the login attempt\n      trackAuthEvent(AuthEventType.SSO_INITIATED, {\n        provider: providerId,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Simulate a redirect URL (in a real app, this would be the provider's auth URL)\n      const redirectUrl = null;\n      \n      // In the demo, we'll simulate a successful login\n      // In a real app, we'd return the URL and redirect the user\n      setTimeout(() => {\n        // Simulate a callback with mock user data\n        const mockData = {\n          id: crypto.randomUUID(),\n          email: `demo_${providerId.toLowerCase()}@example.com`,\n          name: `Demo ${providerId} User`,\n        };\n        \n        // Process the mock callback\n        handleSSOCallback(providerId, mockData);\n      }, 1500);\n      \n      return {\n        url: redirectUrl,\n        success: true\n      };\n    } catch (error) {\n      console.error(\"SSO initiation error:\", error);\n      \n      // Track the failed attempt\n      trackAuthEvent(AuthEventType.SSO_FAILURE, {\n        provider: providerId,\n        error: (error as Error).message,\n        timestamp: new Date().toISOString()\n      });\n      \n      return {\n        url: null,\n        error: \"Failed to initiate SSO login\",\n        success: false\n      };\n    }\n  };\n\n  const handleSSOCallback = async (providerId: string, data: any): Promise<LoginResult> => {\n    try {\n      // In a real implementation, this would validate the token/code from the SSO callback\n      console.log(`Handling SSO callback for provider: ${providerId}`, data);\n      \n      // Import database functions\n      const { createUser, updateUser, addAuditLog } = await import('../utils/database');\n      \n      // For demo purposes, we'll create a user from the data\n      // In production, we'd validate the token and get user info from the provider\n      const userId = data.id || crypto.randomUUID();\n      const mockUser: User = {\n        id: userId,\n        email: data.email,\n        name: data.name || `${providerId} User`,\n        isAdmin: false,\n        role: \"user\",\n        mfaEnabled: false,\n        createdAt: Date.now(),\n        ssoProvider: providerId\n      };\n      \n      // Create or update the user in our database\n      const demoPassword = `sso-${crypto.randomUUID().slice(0, 8)}`;\n      let userRecord = await createUser(data.email, demoPassword);\n      \n      if (userRecord) {\n        // Update the user record with SSO info\n        await updateUser(userRecord.id, {\n          name: data.name || `${providerId} User`,\n          metadata: {\n            ssoProvider: providerId,\n            lastSsoLogin: Date.now()\n          }\n        });\n      }\n      \n      // Add audit log entry\n      await addAuditLog({\n        timestamp: Date.now(),\n        action: 'sso_login',\n        userId: userId,\n        level: 'info',\n        details: {\n          provider: providerId,\n          email: data.email\n        }\n      });\n      \n      // Save the user in state\n      setUser(mockUser);\n      \n      // Set session data\n      localStorage.setItem(\n        'auth_session',\n        JSON.stringify({\n          id: mockUser.id,\n          expiresAt: Date.now() + SESSION_DURATION,\n          lastActivity: Date.now()\n        })\n      );\n      \n      // Track the successful login with analytics\n      trackAuthEvent(AuthEventType.SSO_SUCCESS, {\n        userId: mockUser.id,\n        email: mockUser.email,\n        provider: providerId,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Return success\n      return {\n        success: true,\n        user: mockUser\n      };\n    } catch (err) {\n      console.error(\"SSO callback error:\", err);\n      \n      // Track the failed login\n      trackAuthEvent(AuthEventType.SSO_ERROR, {\n        provider: providerId,\n        error: (err as Error).message,\n        timestamp: new Date().toISOString()\n      });\n      \n      return {\n        success: false,\n        error: \"Failed to authenticate with SSO provider\"\n      };\n    }\n  };\n\n  // Session timeout functions\n  const getSessionTimeRemaining = () => {\n    if (!sessionExpiry) return 0;\n    const remaining = Math.max(0, sessionExpiry - Date.now());\n    return Math.floor(remaining / 1000); // Convert to seconds\n  };\n\n  const extendSession = () => {\n    console.log('Session extended');\n    // Extend the session by 1 hour\n    setSessionExpiry(Date.now() + SESSION_DURATION);\n  };\n\n  // Calculate derived states\n  const isAuthenticated = !!user;\n  const isAdmin = user?.isAdmin || false;\n\n  // Combined auth context value\n  const authContextValue: AuthContextType = {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    isAdmin: !!user?.isAdmin,\n    login,\n    logout,\n    register,\n    updateUser,\n    refreshUser,\n    checkMfaRequired,\n    sendPasswordRecoveryEmail,\n    resetPassword,\n    verifyResetToken,\n    confirmPasswordReset,\n    getSessionTimeRemaining,\n    extendSession,\n    startPasswordlessLogin,\n    verifyPasswordlessCode,\n    getSSOProviders,\n    initiateSSOLogin,\n    handleSSOCallback\n  };\n\n  return <AuthContext.Provider value={authContextValue}>{children}</AuthContext.Provider>;\n};\n\n// Custom hook for using auth context\nexport const useAuth = () => useContext(AuthContext);\n\nexport default AuthContext;\n\n// Convert database user record to auth context user\nconst convertUserRecord = (userRecord: UserRecord): User => {\n  return {\n    id: userRecord.id,\n    email: userRecord.email,\n    name: userRecord.name || userRecord.email.split('@')[0],\n    isAdmin: userRecord.role === 'admin',\n    role: userRecord.role,\n    mfaEnabled: userRecord.mfaEnabled,\n    createdAt: userRecord.createdAt,\n    ssoProvider: userRecord.metadata?.ssoProvider\n  };\n}; ","import React from 'react';\nimport styled from 'styled-components';\n\n// Use transform for animations instead of dimensions for better performance\nconst SpinnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 200px;\n  will-change: transform; /* Hint to browser for optimization */\n`;\n\nconst Spinner = styled.div`\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-top: 4px solid var(--primary-color);\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 0.8s linear infinite;\n  margin-bottom: 15px;\n  will-change: transform; /* Hardware acceleration */\n  transform: translateZ(0); /* Force GPU rendering */\n  \n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst Text = styled.p`\n  color: var(--dark-grey);\n  font-size: 16px;\n  font-weight: 500;\n`;\n\n// Move container outside of the component function for better memory usage\nconst FullPageContainer = styled.div<{ $fullPage: boolean }>`\n  position: ${props => props.$fullPage ? 'fixed' : 'static'};\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: ${props => props.$fullPage ? 'rgba(255, 255, 255, 0.8)' : 'transparent'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  pointer-events: ${props => props.$fullPage ? 'all' : 'none'};\n`;\n\ninterface LoadingSpinnerProps {\n  message?: string;\n  fullPage?: boolean;\n}\n\n// Memoize the component to prevent unnecessary re-renders\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = React.memo(({ \n  message = 'Loading...', \n  fullPage = false \n}) => {\n  return (\n    <FullPageContainer $fullPage={fullPage}>\n      <SpinnerContainer>\n        <Spinner />\n        <Text>{message}</Text>\n      </SpinnerContainer>\n    </FullPageContainer>\n  );\n});\n\n// Set display name for debugging\nLoadingSpinner.displayName = 'LoadingSpinner';\n\nexport default LoadingSpinner; ","import debounce from 'lodash.debounce';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useAuth } from '../contexts/AuthContext';\nimport {\n    defaultSystemSettings, getAllLogs, getAllUsers, getLogCount, getSystemSettings,\n    logAction,\n    saveSystemSettings,\n    SystemSettings, UserRecord\n} from '../utils/database';\nimport LoadingSpinner from './LoadingSpinner';\n\n// Simple icon components using emoji\nconst UserIcon = () => <span role=\"img\" aria-label=\"User Icon\" style={{ marginRight: '8px', fontSize: '18px' }}>👤</span>;\nconst LogIcon = () => <span role=\"img\" aria-label=\"Log Icon\" style={{ marginRight: '8px', fontSize: '18px' }}>📋</span>;\nconst SettingsIcon = () => <span role=\"img\" aria-label=\"Settings Icon\" style={{ marginRight: '8px', fontSize: '18px' }}>⚙️</span>;\n\n// Add type for user action\ntype UserAction = 'edit' | 'delete' | 'resetPassword' | 'toggleMfa';\n\n// Custom virtualized list component with fixed column widths\nconst VirtualizedUserList: React.FC<any> = React.memo(({ \n  users, \n  height, \n  width,\n  onActionClick,\n  openDropdownId,\n  toggleDropdown\n}) => {\n  return (\n    <div style={{ overflowX: 'auto', width: '100%' }}>\n      <table style={{ width: '100%', borderCollapse: 'collapse', tableLayout: 'fixed' }}>\n        <thead>\n          <tr style={{ background: '#f8f9fa', borderBottom: '2px solid #e0e0e0' }}>\n            <th style={{ padding: '14px 10px', textAlign: 'left', width: '30%', fontWeight: '600', color: '#202124' }}>Email</th>\n            <th style={{ padding: '14px 10px', textAlign: 'left', width: '12%', fontWeight: '600', color: '#202124' }}>Role</th>\n            <th style={{ padding: '14px 10px', textAlign: 'left', width: '12%', fontWeight: '600', color: '#202124' }}>MFA STATUS</th>\n            <th style={{ padding: '14px 10px', textAlign: 'left', width: '20%', fontWeight: '600', color: '#202124' }}>Created</th>\n            <th style={{ padding: '14px 10px', textAlign: 'left', width: '20%', fontWeight: '600', color: '#202124' }}>Last Login</th>\n            <th style={{ padding: '14px 10px', textAlign: 'center', width: '6%', fontWeight: '600', color: '#202124' }}>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user: UserRecord) => (\n            <tr key={user.id} style={{ borderBottom: '1px solid #e0e0e0', transition: 'background-color 0.2s' }} className=\"user-row\">\n              <td style={{ padding: '14px 10px', wordBreak: 'break-all', fontWeight: user.role === 'admin' ? '500' : 'normal' }}>\n                {user.email}\n                {user.email === 'keeseetyler@yahoo.com' && (\n                  <span style={{ marginLeft: '5px', color: '#1a73e8', fontSize: '12px', fontWeight: 'bold' }}>\n                    (PRIMARY ADMIN)\n                  </span>\n                )}\n              </td>\n              <td style={{ padding: '14px 10px' }}>\n                <span style={{ \n                  display: 'inline-block', \n                  padding: '3px 8px', \n                  borderRadius: '12px', \n                  backgroundColor: user.role === 'admin' ? '#e8f0fe' : '#f1f3f4',\n                  color: user.role === 'admin' ? '#1a73e8' : '#5f6368',\n                  fontSize: '12px',\n                  fontWeight: '500'\n                }}>\n                  {user.role.toUpperCase()}\n                </span>\n              </td>\n              <td style={{ padding: '14px 10px' }}>\n                <span style={{ \n                  display: 'inline-block', \n                  padding: '3px 8px', \n                  borderRadius: '12px', \n                  backgroundColor: user.mfaEnabled ? '#e6f4ea' : '#fdeded',\n                  color: user.mfaEnabled ? '#34a853' : '#d93025',\n                  fontSize: '12px',\n                  fontWeight: '500'\n                }}>\n                  {user.mfaEnabled ? 'ENABLED' : 'DISABLED'}\n                </span>\n              </td>\n              <td style={{ padding: '14px 10px', whiteSpace: 'nowrap', color: '#5f6368' }}>\n                {new Date(user.createdAt).toLocaleString()}\n              </td>\n              <td style={{ padding: '14px 10px', whiteSpace: 'nowrap', color: user.lastLogin ? '#5f6368' : '#d93025' }}>\n                {user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never logged in'}\n              </td>\n              <td style={{ padding: '14px 10px', textAlign: 'center', position: 'relative' }}>\n                <button \n                  style={{ \n                    border: 'none', \n                    background: 'none', \n                    cursor: 'pointer', \n                    color: '#1a73e8',\n                    fontSize: '20px'\n                  }}\n                  title=\"User actions\"\n                  onClick={(e) => toggleDropdown(user.id, e)}\n                >\n                  ⋯\n                </button>\n                \n                {openDropdownId === user.id && (\n                  <div \n                    style={{ \n                      position: 'absolute', \n                      right: '10px', \n                      top: '45px', \n                      backgroundColor: 'white', \n                      boxShadow: '0 2px 10px rgba(0,0,0,0.1)', \n                      borderRadius: '8px', \n                      zIndex: 100,\n                      width: '180px',\n                      border: '1px solid #e0e0e0'\n                    }}\n                  >\n                    <button \n                      style={{ \n                        display: 'block',\n                        width: '100%',\n                        textAlign: 'left',\n                        padding: '10px 15px',\n                        borderBottom: '1px solid #f0f0f0',\n                        backgroundColor: 'transparent',\n                        border: 'none',\n                        cursor: 'pointer',\n                        fontSize: '14px',\n                        color: '#202124'\n                      }}\n                      onClick={() => onActionClick(user.id, 'edit')}\n                    >\n                      Edit User\n                    </button>\n                    <button \n                      style={{ \n                        display: 'block',\n                        width: '100%',\n                        textAlign: 'left',\n                        padding: '10px 15px',\n                        borderBottom: '1px solid #f0f0f0',\n                        backgroundColor: 'transparent',\n                        border: 'none',\n                        cursor: 'pointer',\n                        fontSize: '14px',\n                        color: '#d93025'\n                      }}\n                      onClick={() => onActionClick(user.id, 'delete')}\n                    >\n                      Delete User\n                    </button>\n                    <button \n                      style={{ \n                        display: 'block',\n                        width: '100%',\n                        textAlign: 'left',\n                        padding: '10px 15px',\n                        borderBottom: '1px solid #f0f0f0',\n                        backgroundColor: 'transparent',\n                        border: 'none',\n                        cursor: 'pointer',\n                        fontSize: '14px',\n                        color: '#202124'\n                      }}\n                      onClick={() => onActionClick(user.id, 'resetPassword')}\n                    >\n                      Reset Password\n                    </button>\n                    <button \n                      style={{ \n                        display: 'block',\n                        width: '100%',\n                        textAlign: 'left',\n                        padding: '10px 15px',\n                        backgroundColor: 'transparent',\n                        border: 'none',\n                        cursor: 'pointer',\n                        fontSize: '14px',\n                        color: user.mfaEnabled ? '#d93025' : '#34a853'\n                      }}\n                      onClick={() => onActionClick(user.id, 'toggleMfa')}\n                    >\n                      {user.mfaEnabled ? 'Disable MFA' : 'Enable MFA'}\n                    </button>\n                  </div>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\nconst DashboardContainer = styled.div`\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 24px;\n`;\n\nconst Title = styled.h2`\n  color: #202124;\n  margin-bottom: 24px;\n  font-size: 28px;\n  font-weight: 700;\n  text-align: center;\n`;\n\nconst TabsContainer = styled.div`\n  display: flex;\n  margin-bottom: 24px;\n  border-radius: 8px;\n  background-color: #fff;\n  box-shadow: none;\n  border: 1px solid #eaeaea;\n  overflow: hidden;\n`;\n\nconst TabButton = styled.button<{ $active: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 16px 20px;\n  background-color: ${props => props.$active ? '#f0f7ff' : 'transparent'};\n  color: ${props => props.$active ? '#1a73e8' : '#5f6368'};\n  border: none;\n  border-bottom: ${props => props.$active ? '3px solid #1a73e8' : '3px solid transparent'};\n  font-weight: ${props => props.$active ? '600' : '500'};\n  font-size: 16px;\n  cursor: pointer;\n  flex: 1;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background-color: ${props => props.$active ? '#f0f7ff' : '#f5f5f5'};\n  }\n`;\n\nconst Container = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  padding: 24px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  border: 1px solid #eaeaea;\n  margin-bottom: 24px;\n`;\n\nconst Button = styled.button`\n  background-color: #1a73e8;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 10px 16px;\n  margin-right: 10px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  \n  &:hover {\n    background-color: #0d66d0;\n  }\n\n  &:disabled {\n    background-color: #b3b3b3;\n    cursor: not-allowed;\n  }\n`;\n\nconst ExportButton = styled(Button)`\n  background-color: #34a853;\n  \n  &:hover {\n    background-color: #2d9249;\n  }\n  \n  &:disabled {\n    background-color: #b3b3b3;\n  }\n`;\n\nconst PaginationControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 24px;\n  padding-top: 16px;\n  border-top: 1px solid #f0f0f0;\n`;\n\nconst PageInfo = styled.div`\n  font-size: 14px;\n  color: #555;\n`;\n\nconst SearchBox = styled.input`\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 16px;\n  width: 300px;\n  font-size: 14px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n  \n  &:focus {\n    outline: none;\n    border-color: #1a73e8;\n    box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);\n  }\n`;\n\nconst InfoPanel = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 24px;\n  flex-wrap: wrap;\n  gap: 16px;\n`;\n\nconst StatCard = styled.div`\n  background-color: #ffffff;\n  padding: 20px;\n  border-radius: 6px;\n  flex: 1;\n  min-width: 180px;\n  box-shadow: none;\n  border: 1px solid #eaeaea;\n  border-left: 4px solid #1a73e8;\n  \n  &:nth-child(2) {\n    border-left-color: #ea4335;\n  }\n  \n  &:nth-child(3) {\n    border-left-color: #fbbc05;\n  }\n  \n  &:nth-child(4) {\n    border-left-color: #34a853;\n  }\n  \n  @media (max-width: 768px) {\n    min-width: 140px;\n  }\n`;\n\nconst StatValue = styled.div`\n  font-size: 28px;\n  font-weight: bold;\n  color: #202124;\n  margin-bottom: 8px;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 14px;\n  color: #5f6368;\n  font-weight: 500;\n`;\n\nconst LogLevel = styled.span<{ level: string }>`\n  display: inline-block;\n  padding: 4px 10px;\n  border-radius: 16px;\n  font-size: 12px;\n  font-weight: 500;\n  background-color: ${props => {\n    switch (props.level) {\n      case 'error': return '#fdeded';\n      case 'warning': return '#fff8e6';\n      default: return '#e8f5e9';\n    }\n  }};\n  color: ${props => {\n    switch (props.level) {\n      case 'error': return '#d32f2f';\n      case 'warning': return '#f57c00';\n      default: return '#2e7d32';\n    }\n  }};\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  width: 100%;\n`;\n\n// Fix the table display to ensure all columns are visible\nconst ResponsiveContainer = styled.div`\n  width: 100%;\n  overflow-x: auto;\n  padding-bottom: 10px;\n  border-radius: 4px;\n  border: 1px solid #f0f0f0;\n`;\n\n// Admin dashboard tabs\ntype TabType = 'users' | 'logs' | 'settings';\n\n// Define type for component with preload method\ninterface PreloadableComponent<T = any> extends React.FC<T> {\n  preload?: () => Promise<{ default: React.ComponentType<T> }>;\n}\n\n// Create a reusable LogTable component for better organization\nconst LogTable = React.memo(({ logs, loading }: { logs: any[], loading: boolean }) => {\n  if (loading) {\n    return (\n      <LoadingContainer>\n        <LoadingSpinner message=\"Loading audit logs...\" />\n      </LoadingContainer>\n    );\n  }\n\n  if (!logs.length) {\n    return <p>No logs found matching your criteria.</p>;\n  }\n\n  return (\n    <div className=\"overflow-x-auto w-full\">\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"bg-gray-50\">\n          <tr>\n            <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-48\">\n              Timestamp\n            </th>\n            <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-32\">\n              Level\n            </th>\n            <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-32\">\n              User ID\n            </th>\n            <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Action\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {logs.map(log => (\n            <tr key={log.id} className=\"hover:bg-gray-50\">\n              <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\n                {formatTimestamp(log.timestamp)}\n              </td>\n              <td className=\"px-4 py-3 whitespace-nowrap\">\n                <LogLevel level={log.level}>\n                  {log.level.toUpperCase()}\n                </LogLevel>\n              </td>\n              <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\n                {log.userId || 'System'}\n              </td>\n              <td className=\"px-4 py-3 text-sm text-gray-900\">\n                {log.action}\n                {log.details && (\n                  <details className=\"mt-1\">\n                    <summary className=\"text-sm text-blue-600 cursor-pointer\">\n                      View Details\n                    </summary>\n                    <pre className=\"mt-2 text-xs bg-gray-100 p-2 rounded overflow-auto max-h-40\">\n                      {JSON.stringify(log.details, null, 2)}\n                    </pre>\n                  </details>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\n// Formatter function for timestamps\nconst formatTimestamp = (timestamp: number): string => {\n  return new Date(timestamp).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n};\n\n/**\n * AdminDashboard component for administrative functions\n */\nconst AdminDashboard: PreloadableComponent = () => {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState<TabType>('users');\n  const [users, setUsers] = useState<UserRecord[]>([]);\n  const [logs, setLogs] = useState<any[]>([]);\n  const [filteredUsers, setFilteredUsers] = useState<UserRecord[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentLogPage, setCurrentLogPage] = useState(0);\n  const [currentUserPage, setCurrentUserPage] = useState(0);\n  const [totalLogs, setTotalLogs] = useState(0);\n  const [totalUsers, setTotalUsers] = useState(0);\n  const [isLoadingUsers, setIsLoadingUsers] = useState(true);\n  const [isLoadingLogs, setIsLoadingLogs] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportingLogs, setExportingLogs] = useState(false);\n  const [tableWidth, setTableWidth] = useState(1160);\n  const [isDashboardLoading, setIsDashboardLoading] = useState(true);\n  const tableRef = useRef<HTMLDivElement>(null);\n  const [levelFilter, setLevelFilter] = useState(\"all\");\n  const [logsPerPage, setLogsPerPage] = useState(25);\n  const [exportError, setExportError] = useState<string | null>(null);\n  const [exportResult, setExportResult] = useState<{success: boolean; count?: number; error?: string} | null>(null);\n  const [systemSettings, setSystemSettings] = useState<SystemSettings>(defaultSystemSettings);\n  const [settingsSaved, setSettingsSaved] = useState(false);\n  // Add state for tracking which dropdown is open\n  const [openDropdownId, setOpenDropdownId] = useState<string | null>(null);\n  \n  const usersPerPage = 100;\n\n  // Keep track of whether component is mounted\n  const isMounted = useRef(true);\n  \n  // Handle user action from dropdown\n  const handleUserAction = (userId: string, action: UserAction) => {\n    // Close the dropdown after action\n    setOpenDropdownId(null);\n    \n    switch (action) {\n      case 'edit':\n        alert(`Edit user with ID: ${userId}`);\n        logAction(\"admin_edit_user_attempt\", { userId });\n        break;\n      case 'delete':\n        if (window.confirm('Are you sure you want to delete this user?')) {\n          alert(`Delete user with ID: ${userId}`);\n          logAction(\"admin_delete_user_attempt\", { userId });\n        }\n        break;\n      case 'resetPassword':\n        if (window.confirm('Are you sure you want to reset this user\\'s password?')) {\n          alert(`Reset password for user with ID: ${userId}`);\n          logAction(\"admin_reset_password_attempt\", { userId });\n        }\n        break;\n      case 'toggleMfa':\n        const userToToggle = users.find(u => u.id === userId);\n        if (userToToggle) {\n          const newStatus = !userToToggle.mfaEnabled;\n          alert(`${newStatus ? 'Enable' : 'Disable'} MFA for user with ID: ${userId}`);\n          logAction(`admin_${newStatus ? 'enable' : 'disable'}_mfa_attempt`, { userId });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Toggle dropdown menu\n  const toggleDropdown = (userId: string, e: React.MouseEvent) => {\n    e.stopPropagation(); // Prevent clicking from bubbling to document\n    setOpenDropdownId(openDropdownId === userId ? null : userId);\n  };\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = () => {\n      setOpenDropdownId(null);\n    };\n    \n    document.addEventListener('click', handleClickOutside);\n    \n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n  \n  // Apply settings to the system\n  const applySystemSettings = useCallback((settings: typeof systemSettings) => {\n    // In a production app, these settings would be applied to various systems\n    // For this demo, we'll log what would happen\n    \n    if (settings.requireMfa) {\n      console.log(\"MFA requirement enabled for all new users\");\n    }\n    \n    if (settings.enforcePasswordPolicy) {\n      console.log(\"Password complexity policy enforced\");\n    }\n    \n    if (settings.enablePasswordless) {\n      console.log(\"Passwordless login enabled\");\n    }\n    \n    if (settings.logFailedLogins) {\n      console.log(\"Failed login attempt logging enabled\");\n    }\n    \n    if (settings.lockAccountAfterFailures) {\n      console.log(\"Account locking after multiple failures enabled\");\n    }\n    \n    console.log(`Session timeout set to ${settings.sessionTimeout} minutes`);\n    \n    if (settings.enableDetailedLogs) {\n      console.log(\"Detailed activity logging enabled\");\n    }\n    \n    if (settings.retainLogsForDays > 365) {\n      console.log(`Log retention period set to ${settings.retainLogsForDays} days`);\n    }\n    \n    if (settings.enableAuditAlerts) {\n      console.log(\"Audit alerts for suspicious activity enabled\");\n    }\n    \n    if (settings.enableSsoIntegration) {\n      console.log(\"SSO integration enabled\");\n    }\n    \n    console.log(`API rate limit set to ${settings.apiRateLimit} requests/minute`);\n    \n    if (settings.enableAnalytics) {\n      console.log(\"Anonymous usage analytics enabled\");\n    }\n  }, []);\n  \n  // Create the memoization unconditionally at the top level, before any early returns\n  const filteredUsersList = useMemo(() => {\n    if (!users.length) return [];\n    \n    return searchTerm ? users.filter(user => {\n      const lowerSearch = searchTerm.toLowerCase();\n      return (\n        user.email.toLowerCase().includes(lowerSearch) ||\n        (user.name && user.name.toLowerCase().includes(lowerSearch)) ||\n        user.role.toLowerCase().includes(lowerSearch)\n      );\n    }) : users;\n  }, [users, searchTerm]);\n  \n  // Filter logs based on level filter and search term\n  const getFilteredLogs = useMemo(() => {\n    return logs.filter(log => {\n      const matchesSearch = searchTerm\n        ? log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          (log.userId && log.userId.toLowerCase().includes(searchTerm.toLowerCase()))\n        : true;\n        \n      const matchesLevel = levelFilter === \"all\" \n        ? true \n        : log.level === levelFilter;\n        \n      return matchesSearch && matchesLevel;\n    });\n  }, [logs, searchTerm, levelFilter]);\n  \n  // Get filtered logs\n  const filteredLogs = useMemo(() => getFilteredLogs, [getFilteredLogs]);\n  \n  // Get paginated logs\n  const paginatedLogs = useMemo(() => {\n    const startIndex = currentLogPage * logsPerPage;\n    return filteredLogs.slice(startIndex, startIndex + logsPerPage);\n  }, [filteredLogs, currentLogPage, logsPerPage]);\n  \n  // Memoize stats section to prevent unnecessary re-renders, but do it at component top level\n  // Moving this above conditional return statements to fix the React hooks rule violation\n  const statsAdmin = useMemo(() => users.filter(u => u.role === 'admin').length, [users]);\n  const statsMfaEnabled = useMemo(() => users.filter(u => u.mfaEnabled).length, [users]);\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  \n  // Load settings on component mount\n  useEffect(() => {\n    try {\n      const loadedSettings = getSystemSettings();\n      setSystemSettings(loadedSettings);\n    } catch (error) {\n      console.error(\"Error loading system settings:\", error);\n    }\n  }, []);\n  \n  // Load initial data on component mount - optimized with parallel data loading\n  useEffect(() => {\n    const initializeData = async () => {\n      if (!isMounted.current) return;\n      \n      setIsDashboardLoading(true);\n      try {\n        // Fetch all users immediately\n        const allUsers = getAllUsers();\n        setUsers(allUsers);\n        setFilteredUsers(allUsers);\n        setTotalUsers(allUsers.length);\n        \n        // Always load logs on initialization, even if not on logs tab\n        const logCount = getLogCount();\n        setTotalLogs(logCount);\n        \n        // Load the first page of logs regardless of active tab\n        const logsPage = getAllLogs(logsPerPage, currentLogPage);\n        setLogs(logsPage);\n      } catch (error) {\n        console.error(\"Error initializing dashboard:\", error);\n      } finally {\n        if (isMounted.current) {\n          setIsDashboardLoading(false);\n          setIsLoadingUsers(false);\n        }\n      }\n    };\n    \n    initializeData();\n  }, []);\n  \n  // Load users when user page changes\n  useEffect(() => {\n    if (activeTab === 'users' && !isDashboardLoading) {\n      loadUsers();\n    }\n  }, [currentUserPage, activeTab, isDashboardLoading]);\n  \n  // Load logs when log page changes\n  useEffect(() => {\n    if (activeTab === 'logs' && !isDashboardLoading) {\n      loadLogs();\n    }\n  }, [currentLogPage, activeTab, isDashboardLoading]);\n  \n  // Update table width on resize - optimized with debounce\n  useEffect(() => {\n    const updateWidth = () => {\n      if (tableRef.current) {\n        setTableWidth(tableRef.current.clientWidth);\n      }\n    };\n    \n    // Initial width calculation\n    updateWidth();\n    \n    // Debounced resize handler\n    const debouncedUpdateWidth = debounce(updateWidth, 200);\n    \n    window.addEventListener('resize', debouncedUpdateWidth);\n    return () => {\n      window.removeEventListener('resize', debouncedUpdateWidth);\n      debouncedUpdateWidth.cancel();\n    };\n  }, []);\n  \n  // Optimize the loading of users with web worker or background processing\n  const loadUsers = useCallback(async () => {\n    if (isDashboardLoading || !isMounted.current) return;\n    \n    setIsLoadingUsers(true);\n    \n    // Use setTimeout to avoid blocking the main thread\n    setTimeout(() => {\n      try {\n        if (!isMounted.current) return;\n        \n        // Load all users at once (removed pagination)\n        const allUsers = getAllUsers();\n        \n        if (isMounted.current) {\n          setUsers(allUsers);\n          setFilteredUsers(allUsers);\n          setTotalUsers(allUsers.length);\n          setIsLoadingUsers(false);\n        }\n      } catch (error) {\n        console.error(\"Error loading users:\", error);\n        if (isMounted.current) {\n          setIsLoadingUsers(false);\n        }\n      }\n    }, 10);\n  }, [isDashboardLoading]);\n  \n  // Optimize the loading of logs\n  const loadLogs = useCallback(async () => {\n    if (isDashboardLoading || !isMounted.current) return;\n    \n    setIsLoadingLogs(true);\n    \n    // Use setTimeout to avoid blocking the main thread\n    setTimeout(() => {\n      try {\n        if (!isMounted.current) return;\n        \n        // In a real app this would be paginated from the server\n        const logsPage = getAllLogs(logsPerPage, currentLogPage);\n        \n        if (isMounted.current) {\n          setLogs(logsPage);\n          setTotalLogs(getLogCount());\n          setIsLoadingLogs(false);\n        }\n      } catch (error) {\n        console.error(\"Error loading logs:\", error);\n        if (isMounted.current) {\n          setIsLoadingLogs(false);\n        }\n      }\n    }, 10);\n  }, [currentLogPage, isDashboardLoading, logsPerPage]);\n  \n  // Handle search with debounce for better performance\n  const debouncedSearch = useMemo(() => \n    debounce((term: string, tab: TabType) => {\n      const lowerTerm = term.toLowerCase();\n      \n      if (tab === 'users') {\n        const filtered = users.filter(user => \n          user.email.toLowerCase().includes(lowerTerm) || \n          user.role.toLowerCase().includes(lowerTerm)\n        );\n        setFilteredUsers(filtered);\n      } else if (tab === 'logs') {\n        const filtered = logs.filter(log => \n          (log.user && log.user.toLowerCase().includes(lowerTerm)) || \n          log.action.toLowerCase().includes(lowerTerm) ||\n          log.level.toLowerCase().includes(lowerTerm)\n        );\n      }\n    }, 300),\n    [users, logs]\n  );\n  \n  // Handle search input changes\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const term = e.target.value;\n    setSearchTerm(term);\n    debouncedSearch(term, activeTab);\n  }, [activeTab, debouncedSearch]);\n  \n  const refreshLogs = useCallback(async () => {\n    try {\n      setIsLoadingLogs(true);\n      const logsPage = getAllLogs(logsPerPage, currentLogPage);\n      setLogs(logsPage);\n      setTotalLogs(getLogCount());\n      setSearchTerm('');\n      setLevelFilter('all');\n    } catch (err) {\n      console.error(\"Error refreshing logs:\", err);\n    } finally {\n      setIsLoadingLogs(false);\n    }\n  }, [currentLogPage, logsPerPage]);\n\n  const handleExport = useCallback(async () => {\n    if (!isExporting) {\n      setIsExporting(true);\n      try {\n        const { exportUsersToPdf, exportAuditLogsToPdf } = await import('../utils/exportPdf');\n        const { downloadPdf } = await import('../utils/exportPdf');\n        \n        if (activeTab === 'users') {\n          console.log(\"Exporting users to PDF...\");\n          if (!filteredUsers || filteredUsers.length === 0) {\n            alert(\"No user data available to export\");\n            return;\n          }\n          \n          try {\n            const pdfBlob = await exportUsersToPdf(filteredUsers);\n            const filename = `user-report-${new Date().toISOString().split('T')[0]}.pdf`;\n            downloadPdf(pdfBlob, filename);\n            alert(\"Users exported successfully!\");\n          } catch (error) {\n            console.error(\"Error creating PDF:\", error);\n            alert(`Failed to export users: ${error instanceof Error ? error.message : 'Unknown error'}`);\n          }\n        } else if (activeTab === 'logs') {\n          console.log(\"Exporting logs to PDF...\");\n          const logsToExport = filteredLogs;\n          if (!logsToExport || logsToExport.length === 0) {\n            alert(\"No log data available to export\");\n            return;\n          }\n          \n          try {\n            const pdfBlob = await exportAuditLogsToPdf(logsToExport);\n            const filename = `audit-log-report-${new Date().toISOString().split('T')[0]}.pdf`;\n            downloadPdf(pdfBlob, filename);\n            alert(\"Logs exported successfully!\");\n          } catch (error) {\n            console.error(\"Error creating PDF:\", error);\n            alert(`Failed to export logs: ${error instanceof Error ? error.message : 'Unknown error'}`);\n          }\n        }\n      } catch (err) {\n        console.error(\"Error loading export module:\", err);\n        alert(\"Failed to load export module\");\n      } finally {\n        setIsExporting(false);\n      }\n    }\n  }, [activeTab, filteredUsers, filteredLogs, isExporting]);\n  \n  // Refresh data with improved implementation\n  const handleRefresh = useCallback(() => {\n    if (activeTab === 'users') {\n      setIsLoadingUsers(true);\n      try {\n        const allUsers = getAllUsers();\n        setTotalUsers(allUsers.length);\n        \n        const paginatedUsers = allUsers.slice(\n          currentUserPage * usersPerPage, \n          (currentUserPage + 1) * usersPerPage\n        );\n        \n        setUsers(paginatedUsers);\n        setFilteredUsers(paginatedUsers);\n        setSearchTerm('');\n      } catch (error) {\n        console.error(\"Error refreshing users:\", error);\n      } finally {\n        setIsLoadingUsers(false);\n      }\n    } else if (activeTab === 'logs') {\n      setIsLoadingLogs(true);\n      try {\n        const logsPage = getAllLogs(logsPerPage, currentLogPage);\n        setLogs(logsPage);\n        setTotalLogs(getLogCount());\n        setSearchTerm('');\n      } catch (error) {\n        console.error(\"Error refreshing logs:\", error);\n      } finally {\n        setIsLoadingLogs(false);\n      }\n    }\n  }, [activeTab, currentLogPage, currentUserPage, logsPerPage, usersPerPage]);\n  \n  // Tab switching - preload data for the new tab\n  const handleTabSwitch = useCallback((tab: TabType) => {\n    setActiveTab(tab);\n    \n    if (tab === 'users' && users.length === 0) {\n      loadUsers();\n    } else if (tab === 'logs' && logs.length === 0) {\n      loadLogs();\n    }\n  }, [loadLogs, loadUsers, logs.length, users.length]);\n  \n  // Navigate between log pages\n  const handleNextLogPage = useCallback(() => {\n    if ((currentLogPage + 1) * logsPerPage < totalLogs) {\n      setCurrentLogPage(currentLogPage + 1);\n    }\n  }, [currentLogPage, logsPerPage, totalLogs]);\n  \n  const handlePrevLogPage = useCallback(() => {\n    if (currentLogPage > 0) {\n      setCurrentLogPage(currentLogPage - 1);\n    }\n  }, [currentLogPage]);\n  \n  // Navigate between user pages\n  const handleNextUserPage = useCallback(() => {\n    if ((currentUserPage + 1) * usersPerPage < totalUsers) {\n      setCurrentUserPage(currentUserPage + 1);\n    }\n  }, [currentUserPage, totalUsers, usersPerPage]);\n  \n  const handlePrevUserPage = useCallback(() => {\n    if (currentUserPage > 0) {\n      setCurrentUserPage(currentUserPage - 1);\n    }\n  }, [currentUserPage]);\n  \n  // Handle page change for logs\n  const handlePageChange = (newPage: number) => {\n    if (newPage >= 0 && newPage < Math.ceil(logs.length / logsPerPage)) {\n      setCurrentLogPage(newPage);\n    }\n  };\n  \n  // Handle exporting logs to PDF\n  const handleExportLogs = async () => {\n    try {\n      setExportingLogs(true);\n      setExportError(null);\n      const { exportAuditLogsToPdf, downloadPdf } = await import('../utils/exportPdf');\n      \n      // Handle the PDF export result properly\n      try {\n        const pdfBlob = await exportAuditLogsToPdf(filteredLogs);\n        const filename = `audit-log-report-${new Date().toISOString().split('T')[0]}.pdf`;\n        downloadPdf(pdfBlob, filename);\n        setExportResult({\n          success: true,\n          count: filteredLogs.length\n        });\n      } catch (error) {\n        setExportError(error instanceof Error ? error.message : \"Unknown error\");\n        setExportResult({\n          success: false,\n          error: error instanceof Error ? error.message : \"Export failed\"\n        });\n      }\n    } catch (err) {\n      console.error(\"Error exporting logs:\", err);\n      setExportError(err instanceof Error ? err.message : \"Unknown error\");\n      setExportResult({\n        success: false,\n        error: err instanceof Error ? err.message : \"Unknown error during export\"\n      });\n    } finally {\n      setExportingLogs(false);\n    }\n  };\n  \n  // Show a loading spinner for the entire dashboard during initial load\n  if (isDashboardLoading) {\n    return (\n      <DashboardContainer>\n        <LoadingContainer style={{ height: '70vh' }}>\n          <LoadingSpinner message=\"Loading Admin Dashboard...\" fullPage={false} />\n        </LoadingContainer>\n      </DashboardContainer>\n    );\n  }\n  \n  // Render the stats section inline instead of using useMemo after conditional returns\n  const renderStats = (\n    <InfoPanel>\n      <StatCard>\n        <StatValue>{totalUsers}</StatValue>\n        <StatLabel>Registered Users</StatLabel>\n      </StatCard>\n      \n      <StatCard>\n        <StatValue>{statsAdmin}</StatValue>\n        <StatLabel>Administrators</StatLabel>\n      </StatCard>\n      \n      <StatCard>\n        <StatValue>{statsMfaEnabled}</StatValue>\n        <StatLabel>MFA Enabled</StatLabel>\n      </StatCard>\n      \n      <StatCard>\n        <StatValue>{totalLogs}</StatValue>\n        <StatLabel>Audit Log Entries</StatLabel>\n      </StatCard>\n    </InfoPanel>\n  );\n  \n  // Save settings function\n  const saveSettings = () => {\n    try {\n      // Save the settings to database/localStorage\n      const success = saveSystemSettings(systemSettings);\n      \n      if (success) {\n        // Apply the settings to the system\n        applySystemSettings(systemSettings);\n        \n        // Add audit log for settings update\n        logAction(\"admin_updated_settings\", { settings: systemSettings });\n        \n        // Show success message\n        setSettingsSaved(true);\n        \n        // Hide success message after 3 seconds\n        setTimeout(() => {\n          if (isMounted.current) {\n            setSettingsSaved(false);\n          }\n        }, 3000);\n      } else {\n        console.error(\"Failed to save settings\");\n      }\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n    }\n  };\n  \n  // Update a single setting\n  const updateSetting = (key: keyof SystemSettings, value: boolean | number) => {\n    setSystemSettings((prev: SystemSettings) => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n  \n  // Toggle a boolean setting\n  const toggleSetting = (setting: keyof SystemSettings) => {\n    updateSetting(setting, !systemSettings[setting]);\n  };\n\n  // Update a numeric setting\n  const updateNumericSetting = (setting: keyof SystemSettings, value: number) => {\n    updateSetting(setting, value);\n  };\n  \n  // Reset settings to default values\n  const resetSettings = () => {\n    setSystemSettings(defaultSystemSettings);\n  };\n  \n  return (\n    <DashboardContainer>\n      <Title>Enterprise Authentication Admin Dashboard</Title>\n      \n      {renderStats}\n      \n      <TabsContainer>\n        <TabButton\n          $active={activeTab === 'users'}\n          onClick={() => setActiveTab('users')}\n        >\n          <UserIcon /> Users\n        </TabButton>\n        <TabButton\n          $active={activeTab === 'logs'}\n          onClick={() => setActiveTab('logs')}\n        >\n          <LogIcon /> Audit Logs\n        </TabButton>\n        <TabButton\n          $active={activeTab === 'settings'}\n          onClick={() => setActiveTab('settings')}\n        >\n          <SettingsIcon /> Settings\n        </TabButton>\n      </TabsContainer>\n      \n      {activeTab === 'users' && (\n        <Container>\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '20px', alignItems: 'center' }}>\n            <div>\n              <h3 style={{ marginBottom: '12px', fontSize: '20px', fontWeight: '600' }}>User Management</h3>\n              <p style={{ fontSize: '15px', color: '#5f6368', marginBottom: '16px', lineHeight: '1.5' }}>\n                View and manage all registered user accounts. All created accounts are displayed here for your review.\n              </p>\n            </div>\n            \n            <div>\n              <ExportButton onClick={handleExport} disabled={isExporting || isLoadingUsers} style={{ marginRight: '10px' }}>\n                {isExporting ? 'Exporting...' : 'Export to PDF'}\n              </ExportButton>\n              <Button onClick={handleRefresh} disabled={isLoadingUsers}>\n                {isLoadingUsers ? 'Loading...' : 'Refresh Users'}\n              </Button>\n            </div>\n          </div>\n          \n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '16px', alignItems: 'center' }}>\n            <SearchBox \n              type=\"text\"\n              placeholder=\"Search users by email or role...\"\n              value={searchTerm}\n              onChange={handleSearch}\n            />\n            \n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <div style={{ \n                marginRight: '16px', \n                display: 'flex', \n                alignItems: 'center', \n                padding: '8px 12px', \n                backgroundColor: '#f1f3f4', \n                borderRadius: '4px', \n                fontSize: '14px' \n              }}>\n                <span role=\"img\" aria-label=\"Filter\" style={{ marginRight: '6px' }}>🔍</span>\n                <span>\n                  <strong>{filteredUsersList.length}</strong> {filteredUsersList.length === 1 ? 'user' : 'users'} found\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          {isLoadingUsers ? (\n            <LoadingContainer>\n              <LoadingSpinner message=\"Loading users...\" />\n            </LoadingContainer>\n          ) : (\n            <ResponsiveContainer ref={tableRef}>\n              <VirtualizedUserList \n                users={filteredUsersList}\n                height={600}\n                width={tableWidth}\n                onActionClick={handleUserAction}\n                openDropdownId={openDropdownId}\n                toggleDropdown={toggleDropdown}\n              />\n            </ResponsiveContainer>\n          )}\n        </Container>\n      )}\n      \n      {activeTab === 'logs' && (\n        <Container>\n          <div className=\"flex flex-col space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-xl font-semibold mb-1\">Audit Log Management</h2>\n                <p className=\"text-gray-600 text-sm\">\n                  View and export system activity and security events\n                </p>\n              </div>\n              <div className=\"flex space-x-2\">\n                <ExportButton \n                  onClick={handleExportLogs} \n                  disabled={exportingLogs}\n                >\n                  {exportingLogs ? 'Exporting...' : 'Export PDF'}\n                </ExportButton>\n                <Button onClick={refreshLogs} disabled={isLoadingLogs}>\n                  {isLoadingLogs ? (\n                    <span>Refreshing...</span>\n                  ) : (\n                    <span>Refresh</span>\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 sm:items-center\">\n              <SearchBox\n                type=\"text\"\n                placeholder=\"Filter by action or user ID\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n              \n              <div className=\"flex space-x-2 items-center\">\n                <select \n                  className=\"form-select rounded border border-gray-300 py-2 px-3 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  value={levelFilter}\n                  onChange={(e) => setLevelFilter(e.target.value)}\n                >\n                  <option value=\"all\">All Levels</option>\n                  <option value=\"info\">Info Only</option>\n                  <option value=\"warning\">Warning Only</option>\n                  <option value=\"error\">Error Only</option>\n                </select>\n                \n                <select\n                  className=\"form-select rounded border border-gray-300 py-2 px-3 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  value={logsPerPage}\n                  onChange={(e) => setLogsPerPage(Number(e.target.value))}\n                >\n                  <option value=\"10\">10 per page</option>\n                  <option value=\"25\">25 per page</option>\n                  <option value=\"50\">50 per page</option>\n                  <option value=\"100\">100 per page</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"flex items-center text-sm text-gray-600\">\n              <span>\n                Found {filteredLogs.length} {filteredLogs.length === 1 ? 'log' : 'logs'} matching your criteria\n              </span>\n            </div>\n\n            <div className=\"rounded-md border border-gray-200\">\n              <LogTable logs={paginatedLogs} loading={isLoadingLogs} />\n            </div>\n\n            <PaginationControls>\n              <Button \n                onClick={() => handlePageChange(currentLogPage - 1)} \n                disabled={currentLogPage === 0}\n              >\n                Previous\n              </Button>\n              <PageInfo>\n                Page {currentLogPage + 1} of {Math.max(1, Math.ceil(filteredLogs.length / logsPerPage))}\n              </PageInfo>\n              <Button \n                onClick={() => handlePageChange(currentLogPage + 1)} \n                disabled={currentLogPage >= Math.ceil(filteredLogs.length / logsPerPage) - 1}\n              >\n                Next\n              </Button>\n            </PaginationControls>\n\n            {exportResult && (\n              <div className=\"mt-4 p-4 bg-gray-100 rounded-md\">\n                <h4 className=\"font-medium mb-2\">Export Result</h4>\n                <div className=\"text-sm\">\n                  {exportResult.success ? (\n                    <div className=\"text-green-600\">\n                      Successfully exported {exportResult.count} logs to PDF.\n                    </div>\n                  ) : (\n                    <div className=\"text-red-600\">\n                      Error exporting logs: {exportResult.error}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </Container>\n      )}\n      \n      {activeTab === 'settings' && (\n        <Container>\n          <div className=\"flex flex-col space-y-6\">\n            <div>\n              <h2 className=\"text-xl font-semibold mb-1\">System Settings</h2>\n              <p className=\"text-gray-600 text-sm\">\n                Configure global system settings and security policies\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"p-4 rounded-md border border-gray-200\">\n                <h3 className=\"text-lg font-medium mb-3\">User Defaults</h3>\n                \n                <div className=\"flex flex-col space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.requireMfa}\n                        onChange={() => toggleSetting('requireMfa')}\n                      />\n                      Require MFA for all new users\n                    </label>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.enforcePasswordPolicy}\n                        onChange={() => toggleSetting('enforcePasswordPolicy')}\n                      />\n                      Enforce password complexity\n                    </label>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.enablePasswordless}\n                        onChange={() => toggleSetting('enablePasswordless')}\n                      />\n                      Enable passwordless login\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-4 rounded-md border border-gray-200\">\n                <h3 className=\"text-lg font-medium mb-3\">Security Settings</h3>\n                \n                <div className=\"flex flex-col space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.logFailedLogins}\n                        onChange={() => toggleSetting('logFailedLogins')}\n                      />\n                      Log failed login attempts\n                    </label>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.lockAccountAfterFailures}\n                        onChange={() => toggleSetting('lockAccountAfterFailures')}\n                      />\n                      Lock accounts after multiple failures\n                    </label>\n                  </div>\n                  \n                  <div className=\"flex flex-col space-y-2\">\n                    <label className=\"font-medium text-sm\">Session timeout (minutes):</label>\n                    <input \n                      type=\"number\" \n                      min=\"5\" \n                      max=\"1440\"\n                      className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                      value={systemSettings.sessionTimeout}\n                      onChange={(e) => updateNumericSetting('sessionTimeout', parseInt(e.target.value))}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-4 rounded-md border border-gray-200\">\n                <h3 className=\"text-lg font-medium mb-3\">Audit & Compliance</h3>\n                \n                <div className=\"flex flex-col space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.enableDetailedLogs}\n                        onChange={() => toggleSetting('enableDetailedLogs')}\n                      />\n                      Enable detailed activity logging\n                    </label>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.retainLogsForDays > 365}\n                        onChange={() => updateNumericSetting('retainLogsForDays', systemSettings.retainLogsForDays > 365 ? 90 : 366)}\n                      />\n                      Retain logs for extended period (1 year+)\n                    </label>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.enableAuditAlerts}\n                        onChange={() => toggleSetting('enableAuditAlerts')}\n                      />\n                      Enable audit alerts for suspicious activity\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-4 rounded-md border border-gray-200\">\n                <h3 className=\"text-lg font-medium mb-3\">Integration Settings</h3>\n                \n                <div className=\"flex flex-col space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.enableSsoIntegration}\n                        onChange={() => toggleSetting('enableSsoIntegration')}\n                      />\n                      Enable SSO integration\n                    </label>\n                  </div>\n                  \n                  <div className=\"flex flex-col space-y-2\">\n                    <label className=\"font-medium text-sm\">API Rate Limit (requests/min):</label>\n                    <input \n                      type=\"number\" \n                      min=\"10\" \n                      max=\"1000\"\n                      className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                      value={systemSettings.apiRateLimit}\n                      onChange={(e) => updateNumericSetting('apiRateLimit', parseInt(e.target.value))}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"flex items-center\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"mr-2 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500\" \n                        checked={systemSettings.enableAnalytics}\n                        onChange={() => toggleSetting('enableAnalytics')}\n                      />\n                      Enable anonymous usage analytics\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end space-x-3 mt-6\">\n              <Button onClick={resetSettings} className=\"bg-gray-100 text-gray-800 hover:bg-gray-200\">\n                Reset to Defaults\n              </Button>\n              <Button onClick={saveSettings} className=\"bg-blue-600 text-white hover:bg-blue-700\">\n                Save All Settings\n              </Button>\n            </div>\n            \n            {settingsSaved && (\n              <div className=\"mt-4 p-3 bg-green-50 border border-green-200 text-green-700 rounded\">\n                Settings saved successfully!\n              </div>\n            )}\n          </div>\n        </Container>\n      )}\n    </DashboardContainer>\n  );\n};\n\n// Add static preload method to make AdminDashboard a PreloadableComponent\nAdminDashboard.preload = () => import('./AdminDashboard');\n\nexport default AdminDashboard; ","import { useContext } from \"react\";\nimport AuthContext from \"../contexts/AuthContext\";\n\n// Define types for login and register results\ninterface LoginResult {\n  success: boolean;\n  user?: any;\n  error?: string;\n  requiresMfa?: boolean;\n}\n\ninterface RegisterResult {\n  success: boolean;\n  user?: any;\n  error?: string;\n}\n\n// Import the interface type directly\ninterface AuthContextType {\n  user: any | null;\n  loading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n  login: (email: string, password: string) => Promise<LoginResult>;\n  logout: () => void;\n  register: (\n    email: string,\n    password: string,\n    name?: string\n  ) => Promise<RegisterResult>;\n  updateUser: (userData: any) => Promise<void>;\n  refreshUser: () => Promise<void>;\n  checkMfaRequired: (email: string) => Promise<boolean>;\n  sendPasswordRecoveryEmail: (\n    email: string\n  ) => Promise<{ success: boolean; error?: string }>;\n  getSessionTimeRemaining?: () => number;\n  extendSession?: () => void;\n}\n\n/**\n * Hook to access the authentication context\n */\nexport const useAuthContext = (): AuthContextType => {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    console.error(\"useAuthContext: AuthContext not found\");\n\n    // Return a safe fallback to prevent the app from crashing\n    return {\n      user: null,\n      loading: false,\n      error: null,\n      isAuthenticated: false,\n      isAdmin: false,\n      login: async () => ({ success: false, error: \"Auth not initialized\" }),\n      logout: () => console.error(\"Auth not initialized\"),\n      register: async () => ({ success: false, error: \"Auth not initialized\" }),\n      updateUser: async () => console.error(\"Auth not initialized\"),\n      refreshUser: async () => console.error(\"Auth not initialized\"),\n      checkMfaRequired: async () => false,\n      sendPasswordRecoveryEmail: async () => ({\n        success: false,\n        error: \"Auth not initialized\",\n      }),\n      getSessionTimeRemaining: () => 0,\n      extendSession: () => console.error(\"Auth not initialized\"),\n    };\n  }\n\n  // Derive isAuthenticated and isAdmin from user\n  return {\n    ...context,\n    isAuthenticated: !!context.user,\n    isAdmin: !!context.user?.isAdmin,\n  };\n};\n\n// Export as default for backward compatibility\nexport default useAuthContext;\n","import { nanoid } from \"nanoid\";\nimport { UserRecord } from \"../../utils/database\";\n\n// SSO Provider Types\nexport enum SSOProviderType {\n  SAML = \"saml\",\n  OIDC = \"oidc\",\n  OAUTH2 = \"oauth2\",\n}\n\n// Identity Provider Configuration\nexport interface IdentityProviderConfig {\n  id: string;\n  name: string;\n  type: SSOProviderType;\n  enabled: boolean;\n  metadata: {\n    entityId?: string;\n    ssoUrl?: string;\n    certificate?: string;\n    issuer?: string;\n    clientId?: string;\n    clientSecret?: string;\n    authorizationUrl?: string;\n    tokenUrl?: string;\n    userInfoUrl?: string;\n    logoutUrl?: string;\n    redirectUri?: string;\n    scope?: string;\n  };\n  attributeMapping: {\n    email?: string;\n    firstName?: string;\n    lastName?: string;\n    role?: string;\n    groups?: string;\n  };\n  createdAt: number;\n  updatedAt: number;\n}\n\n// User data returned from SSO provider\nexport interface SSOUserData {\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  roles?: string[];\n  groups?: string[];\n  externalId?: string;\n  provider: string;\n  attributes?: Record<string, any>;\n}\n\n// Storage key for identity providers\nconst IDP_STORAGE_KEY = \"enterprise_auth_idp_config\";\n\n/**\n * Saves identity provider configurations to secure storage\n * @param configs Array of identity provider configurations\n * @returns Whether the operation was successful\n */\nexport const saveIdentityProviders = (\n  configs: IdentityProviderConfig[]\n): boolean => {\n  try {\n    // In a real implementation, these would be encrypted\n    localStorage.setItem(IDP_STORAGE_KEY, JSON.stringify(configs));\n    return true;\n  } catch (error) {\n    console.error(\"Error saving identity providers:\", error);\n    return false;\n  }\n};\n\n/**\n * Retrieves identity provider configurations from secure storage\n * @returns Array of identity provider configurations\n */\nexport const getIdentityProviders = (): IdentityProviderConfig[] => {\n  // In a real app, this would fetch from a database or local storage\n  // For the demo, return mock providers\n  const storedProviders = localStorage.getItem(\"sso_providers\");\n  if (storedProviders) {\n    try {\n      return JSON.parse(storedProviders);\n    } catch (e) {\n      console.error(\"Error parsing stored SSO providers\", e);\n    }\n  }\n\n  // Initialize with mock providers if none exist\n  localStorage.setItem(\"sso_providers\", JSON.stringify(MOCK_PROVIDERS));\n  return MOCK_PROVIDERS;\n};\n\n/**\n * Creates a new identity provider configuration\n * @param config Partial identity provider configuration\n * @returns Full identity provider configuration\n */\nexport const createIdentityProvider = (\n  config: Partial<IdentityProviderConfig>\n): IdentityProviderConfig => {\n  const now = Date.now();\n  const providers = getIdentityProviders();\n\n  const newProvider: IdentityProviderConfig = {\n    id: nanoid(),\n    name: config.name || \"New Identity Provider\",\n    type: config.type || SSOProviderType.SAML,\n    enabled: config.enabled ?? false,\n    metadata: config.metadata || {},\n    attributeMapping: config.attributeMapping || {},\n    createdAt: now,\n    updatedAt: now,\n  };\n\n  providers.push(newProvider);\n  saveIdentityProviders(providers);\n\n  return newProvider;\n};\n\n/**\n * Updates an existing identity provider configuration\n * @param id Identity provider ID\n * @param updates Partial updates to the configuration\n * @returns Updated identity provider configuration or null if not found\n */\nexport const updateIdentityProvider = (\n  id: string,\n  updates: Partial<IdentityProviderConfig>\n): IdentityProviderConfig | null => {\n  const providers = getIdentityProviders();\n  const index = providers.findIndex((p) => p.id === id);\n\n  if (index === -1) return null;\n\n  providers[index] = {\n    ...providers[index],\n    ...updates,\n    updatedAt: Date.now(),\n  };\n\n  saveIdentityProviders(providers);\n  return providers[index];\n};\n\n/**\n * Deletes an identity provider configuration\n * @param id Identity provider ID\n * @returns Whether the operation was successful\n */\nexport const deleteIdentityProvider = (id: string): boolean => {\n  const providers = getIdentityProviders();\n  const index = providers.findIndex((p) => p.id === id);\n\n  if (index === -1) return false;\n\n  providers.splice(index, 1);\n  saveIdentityProviders(providers);\n  return true;\n};\n\n/**\n * Map SSO user data to internal user record\n * This function would be expanded in a full implementation to properly map\n * attributes from the SSO provider to the internal user model\n * @param ssoUser User data from SSO provider\n * @returns Mapped user record for the internal system\n */\nexport const mapSSOUserToUserRecord = (\n  ssoUser: SSOUserData\n): Partial<UserRecord> => {\n  // In a real implementation, this would be more sophisticated\n  // with proper attribute mapping and role assignment\n  return {\n    email: ssoUser.email,\n    metadata: {\n      ...ssoUser.attributes,\n      ssoProvider: ssoUser.provider,\n      externalId: ssoUser.externalId,\n    },\n    // Role mapping would need to be configured per organization\n    role: ssoUser.roles?.includes(\"admin\") ? \"admin\" : \"user\",\n  };\n};\n\n/**\n * Mock function to simulate SAML authentication\n * In a real implementation, this would use a library like passport-saml\n * @param providerId Identity provider ID\n * @param samlResponse SAML response from the identity provider\n * @returns User data from the SAML response\n */\nexport const processSAMLResponse = (\n  providerId: string,\n  samlResponse: string\n): SSOUserData | null => {\n  // This is a mock implementation\n  // In a real implementation, this would parse the SAML response\n  const providers = getIdentityProviders();\n  const provider = providers.find((p) => p.id === providerId);\n\n  if (!provider) return null;\n\n  // Mock SAML response parsing\n  return {\n    email: \"enterprise.user@example.com\",\n    firstName: \"Enterprise\",\n    lastName: \"User\",\n    roles: [\"user\"],\n    provider: provider.name,\n    externalId: \"ext-123456\",\n    attributes: {\n      department: \"IT\",\n      employeeId: \"EMP123456\",\n    },\n  };\n};\n\n/**\n * Mock function to simulate OIDC authentication\n * In a real implementation, this would use a library like openid-client\n * @param providerId Identity provider ID\n * @param code Authorization code from the OIDC provider\n * @returns User data from the OIDC provider\n */\nexport const processOIDCCallback = (\n  providerId: string,\n  code: string\n): SSOUserData | null => {\n  // This is a mock implementation\n  // In a real implementation, this would exchange the code for tokens\n  // and fetch user info from the OIDC provider\n  const providers = getIdentityProviders();\n  const provider = providers.find((p) => p.id === providerId);\n\n  if (!provider) return null;\n\n  // Mock OIDC user info\n  return {\n    email: \"oidc.user@example.com\",\n    firstName: \"OIDC\",\n    lastName: \"User\",\n    roles: [\"user\"],\n    groups: [\"Employees\", \"Engineering\"],\n    provider: provider.name,\n    externalId: \"oidc-789012\",\n    attributes: {\n      sub: \"sub-789012\",\n      preferred_username: \"oidc.user\",\n    },\n  };\n};\n\n/**\n * Generate the SSO initiation URL for a specific provider\n * @param providerId Identity provider ID\n * @returns URL to initiate SSO authentication\n */\nexport const generateSSOInitiationURL = (providerId: string): string | null => {\n  const providers = getIdentityProviders();\n  const provider = providers.find((p) => p.id === providerId);\n\n  if (!provider || !provider.enabled) return null;\n\n  // This is a simplified implementation\n  if (provider.type === SSOProviderType.SAML) {\n    // In a real implementation, this would generate a SAML request\n    return `/api/auth/sso/saml/${providerId}/login`;\n  } else if (provider.type === SSOProviderType.OIDC) {\n    // In a real implementation, this would generate an OIDC authorization URL\n    const params = new URLSearchParams({\n      client_id: provider.metadata.clientId || \"\",\n      response_type: \"code\",\n      scope: provider.metadata.scope || \"openid profile email\",\n      redirect_uri: provider.metadata.redirectUri || \"\",\n      state: nanoid(),\n    });\n    return `${provider.metadata.authorizationUrl}?${params.toString()}`;\n  }\n\n  return null;\n};\n\n/**\n * Mock function to simulate the enforcement of organization-based SSO policy\n * This would be enhanced in a real implementation to enforce policies like:\n * - Requiring specific email domains to use SSO\n * - Preventing password-based login for SSO users\n * @param email User email address\n * @returns Whether SSO is required for this user\n */\nexport const isSSORequiredForEmail = (email: string): boolean => {\n  // In a real implementation, this would check organization policies\n  // and determine if SSO is required based on email domain\n  const domains = [\"enterprise.com\", \"corporate.org\"];\n  const emailDomain = email.split(\"@\")[1];\n  return domains.includes(emailDomain);\n};\n\n/**\n * Get available SSO providers for a user by email domain\n * @param email User email address\n * @returns Array of available identity providers\n */\nexport const getAvailableProvidersForEmail = (\n  email: string\n): IdentityProviderConfig[] => {\n  // This would be enhanced in a real implementation to match\n  // email domains to specific identity providers\n  const providers = getIdentityProviders();\n  const emailDomain = email.split(\"@\")[1];\n\n  // Return only enabled providers\n  return providers.filter((p) => p.enabled);\n};\n\n// Mock SSO providers for the demo\nconst MOCK_PROVIDERS: IdentityProviderConfig[] = [\n  {\n    id: \"google-sso\",\n    name: \"Google Workspace\",\n    type: SSOProviderType.OIDC,\n    enabled: true,\n    metadata: {\n      clientId: \"mock-client-id\",\n      authorizationUrl: \"https://accounts.google.com/o/oauth2/auth\",\n      tokenUrl: \"https://oauth2.googleapis.com/token\",\n      userInfoUrl: \"https://openidconnect.googleapis.com/v1/userinfo\",\n      scope: \"openid email profile\",\n      redirectUri: window.location.origin + \"/auth/callback\",\n    },\n    attributeMapping: {\n      email: \"email\",\n      firstName: \"given_name\",\n      lastName: \"family_name\",\n    },\n    createdAt: Date.now(),\n    updatedAt: Date.now(),\n  },\n  {\n    id: \"microsoft-sso\",\n    name: \"Microsoft Azure AD\",\n    type: SSOProviderType.OIDC,\n    enabled: true,\n    metadata: {\n      clientId: \"mock-ms-client-id\",\n      authorizationUrl:\n        \"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\",\n      tokenUrl: \"https://login.microsoftonline.com/common/oauth2/v2.0/token\",\n      userInfoUrl: \"https://graph.microsoft.com/oidc/userinfo\",\n      scope: \"openid email profile\",\n      redirectUri: window.location.origin + \"/auth/callback\",\n    },\n    attributeMapping: {\n      email: \"email\",\n      firstName: \"given_name\",\n      lastName: \"family_name\",\n    },\n    createdAt: Date.now(),\n    updatedAt: Date.now(),\n  },\n  {\n    id: \"okta-sso\",\n    name: \"Okta SSO\",\n    type: SSOProviderType.SAML,\n    enabled: true,\n    metadata: {\n      entityId: \"https://okta.example.com\",\n      ssoUrl: \"https://okta.example.com/app/saml\",\n      certificate: \"MOCK_CERTIFICATE\",\n      issuer: \"https://okta.example.com\",\n    },\n    attributeMapping: {\n      email: \"email\",\n      firstName: \"firstName\",\n      lastName: \"lastName\",\n      role: \"role\",\n    },\n    createdAt: Date.now(),\n    updatedAt: Date.now(),\n  },\n  {\n    id: \"github-sso\",\n    name: \"GitHub\",\n    type: SSOProviderType.OAUTH2,\n    enabled: true,\n    metadata: {\n      clientId: \"mock-gh-client-id\",\n      authorizationUrl: \"https://github.com/login/oauth/authorize\",\n      tokenUrl: \"https://github.com/login/oauth/access_token\",\n      userInfoUrl: \"https://api.github.com/user\",\n      scope: \"user:email\",\n      redirectUri: window.location.origin + \"/auth/callback\",\n    },\n    attributeMapping: {\n      email: \"email\",\n    },\n    createdAt: Date.now(),\n    updatedAt: Date.now(),\n  },\n];\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { IdentityProviderConfig, SSOProviderType } from \"../../utils/sso/ssoProvider\";\n\nconst Button = styled.button`\n  width: 100%;\n  padding: 12px 16px;\n  border-radius: 6px;\n  border: 1px solid #e2e8f0;\n  background: white;\n  cursor: pointer;\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  transition: all 0.2s;\n  text-align: left;\n  margin-bottom: 8px;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst GoogleButton = styled(Button)`\n  border-color: #4285f4;\n  color: #4285f4;\n  \n  &:hover {\n    background-color: rgba(66, 133, 244, 0.05);\n  }\n`;\n\nconst MicrosoftButton = styled(Button)`\n  border-color: #00a4ef;\n  color: #00a4ef;\n  \n  &:hover {\n    background-color: rgba(0, 164, 239, 0.05);\n  }\n`;\n\nconst OktaButton = styled(Button)`\n  border-color: #007dc1;\n  color: #007dc1;\n  \n  &:hover {\n    background-color: rgba(0, 125, 193, 0.05);\n  }\n`;\n\nconst GithubButton = styled(Button)`\n  border-color: #333;\n  color: #333;\n  \n  &:hover {\n    background-color: rgba(51, 51, 51, 0.05);\n  }\n`;\n\nconst Divider = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 20px 0;\n  \n  &::before, &::after {\n    content: '';\n    flex: 1;\n    border-bottom: 1px solid #e2e8f0;\n  }\n`;\n\nconst DividerText = styled.span`\n  padding: 0 10px;\n  color: #718096;\n  font-size: 14px;\n`;\n\nconst ProvidersContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-top: 16px;\n`;\n\nconst Icon = styled.span`\n  margin-right: 10px;\n  font-size: 18px;\n`;\n\n// Provider icons based on type\nconst getProviderIcon = (provider: any): string => {\n  // Use custom icons for specific providers based on name\n  const name = provider.name.toLowerCase();\n  \n  if (name.includes('google')) return \"🔍\";\n  if (name.includes('github')) return \"🐱\";\n  if (name.includes('microsoft')) return \"🪟\";\n  if (name.includes('facebook')) return \"👍\";\n  if (name.includes('apple')) return \"🍎\";\n  if (name.includes('twitter')) return \"🐦\";\n  if (name.includes('linkedin')) return \"💼\";\n  \n  // Use type-based icons as fallback\n  switch (provider.type) {\n    case SSOProviderType.SAML:\n      return \"🔐\";\n    case SSOProviderType.OIDC:\n      return \"🔄\";\n    case SSOProviderType.OAUTH2:\n      return \"🔑\";\n    default:\n      return \"🔑\";\n  }\n};\n\n// Provider colors based on name\nconst getProviderColor = (name: string): string => {\n  const lowerName = name.toLowerCase();\n  \n  if (lowerName.includes('google')) return \"#4285f4\";\n  if (lowerName.includes('github')) return \"#333\";\n  if (lowerName.includes('microsoft')) return \"#00a4ef\";\n  if (lowerName.includes('facebook')) return \"#3b5998\";\n  if (lowerName.includes('apple')) return \"#000000\";\n  if (lowerName.includes('twitter')) return \"#1da1f2\";\n  if (lowerName.includes('linkedin')) return \"#0077b5\";\n  if (lowerName.includes('okta')) return \"#007dc1\";\n  \n  return \"#718096\"; // Default color\n};\n\ninterface SSOLoginButtonProps {\n  provider: any;\n  onClick: () => void;\n}\n\nconst SSOLoginButton: React.FC<SSOLoginButtonProps> = ({ provider, onClick }) => {\n  const providerColor = getProviderColor(provider.name);\n  const icon = getProviderIcon(provider);\n  \n  return (\n    <button \n      className=\"sso-provider-button\"\n      onClick={onClick}\n      style={{ \n        '--provider-color': providerColor,\n        borderColor: providerColor,\n        color: providerColor\n      } as React.CSSProperties}\n    >\n      <span className=\"provider-icon\">{icon}</span>\n      <span className=\"provider-name\">Continue with {provider.name}</span>\n    </button>\n  );\n};\n\ninterface SSOProviderListProps {\n  providers: IdentityProviderConfig[];\n  onLoginClick?: (providerId: string) => void;\n}\n\nexport const SSOProviderList: React.FC<SSOProviderListProps> = ({\n  providers,\n  onLoginClick,\n}) => {\n  if (!providers || providers.length === 0) {\n    return (\n      <div className=\"card\">\n        <h2 className=\"card-title\">Single Sign-On</h2>\n        <p>No SSO providers are configured. Please contact your administrator.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <h2 className=\"card-title\">Single Sign-On</h2>\n      <p className=\"text-sm text-gray\">Sign in with your organization credentials</p>\n      \n      <ProvidersContainer>\n        {providers.map((provider) => (\n          <SSOLoginButton\n            key={provider.id}\n            provider={provider}\n            onClick={() => onLoginClick && onLoginClick(provider.id)}\n          />\n        ))}\n      </ProvidersContainer>\n    </div>\n  );\n};\n\nexport default SSOLoginButton; ","import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport LoadingSpinner from '../LoadingSpinner';\nimport SSOLoginButton from './SSOLoginButton';\n\nconst SSOProviders: React.FC = () => {\n  const auth = useAuth();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticating, setIsAuthenticating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [providers, setProviders] = useState<any[]>([]);\n  const [activeProvider, setActiveProvider] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadProviders = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        // Get SSO providers from the utility functions\n        const availableProviders = await auth.getSSOProviders();\n        setProviders(availableProviders || []);\n      } catch (err) {\n        console.error(\"Error loading SSO providers:\", err);\n        setError(\"Failed to load login options. Please try again later.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadProviders();\n  }, [auth]);\n\n  const handleSSOLogin = async (providerId: string) => {\n    try {\n      setError(null);\n      setIsAuthenticating(true);\n      setActiveProvider(providerId);\n      \n      const result = await auth.initiateSSOLogin(providerId);\n      \n      if (!result.success) {\n        setError(result.error || \"SSO login failed. Please try again.\");\n        setIsAuthenticating(false);\n      }\n      // The success case will be handled by the timeout in initiateSSOLogin\n      // which will redirect to dashboard\n      \n    } catch (err) {\n      console.error(\"SSO login error:\", err);\n      setError(\"SSO login failed. Please try again or use another method.\");\n      setIsAuthenticating(false);\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"sso-loading\">Loading login options...</div>;\n  }\n\n  if (isAuthenticating) {\n    return (\n      <div className=\"sso-authenticating\">\n        <LoadingSpinner message={`Authenticating with ${activeProvider}...`} />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"sso-error\">{error}</div>;\n  }\n\n  if (!providers || providers.length === 0) {\n    return null; // Don't show the section if no providers\n  }\n\n  return (\n    <div className=\"sso-providers-container\">\n      <div className=\"sso-divider\">\n        <span>Or continue with</span>\n      </div>\n      <div className=\"sso-buttons-container\">\n        {providers.map(provider => (\n          <SSOLoginButton \n            key={provider.id}\n            provider={provider}\n            onClick={() => handleSSOLogin(provider.id)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SSOProviders; ","import React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuthContext } from '../hooks/useAuthContext';\nimport LoadingSpinner from './LoadingSpinner';\nimport SSOProviders from './sso/SSOProviders';\n\nexport interface AuthFormSwitcherProps {\n  initialMode?: 'login' | 'signup';\n}\n\nconst AuthFormSwitcher: React.FC<AuthFormSwitcherProps> = ({ initialMode = 'login' }) => {\n  const [mode, setMode] = useState<'login' | 'signup'>(initialMode);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [showPasswordless, setShowPasswordless] = useState(false);\n  const [showSSO, setShowSSO] = useState(false);\n  const [showAdminLogin, setShowAdminLogin] = useState(false);\n  const auth = useAuthContext();\n  const navigate = useNavigate();\n\n  // If already authenticated, navigate to dashboard\n  useEffect(() => {\n    if (auth.isAuthenticated) {\n      navigate('/dashboard');\n    }\n    \n    // Secret key combination detection (Alt+Shift+A)\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.altKey && e.shiftKey && e.key === 'A') {\n        setShowAdminLogin(prev => !prev);\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [auth.isAuthenticated, navigate]);\n\n  const toggleAuthMode = () => {\n    setMode(mode === 'login' ? 'signup' : 'login');\n    setError(null);\n  };\n\n  const validateForm = () => {\n    if (!email || !password) {\n      setError('Please fill in all required fields');\n      return false;\n    }\n\n    if (mode === 'signup' && password !== confirmPassword) {\n      setError('Passwords do not match');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      if (mode === 'login') {\n        console.log(\"Attempting login\");\n        const result = await auth.login(email, password);\n        console.log(\"Login result:\", result);\n        \n        if (result.success) {\n          console.log(\"Login successful, redirecting to dashboard\");\n          navigate('/dashboard');\n        } else {\n          setError(result.error || 'Login failed');\n        }\n      } else {\n        console.log(\"Attempting registration\");\n        const result = await auth.register(email, password);\n        console.log(\"Registration result:\", result);\n        \n        if (result.success) {\n          console.log(\"Registration successful, redirecting to dashboard\");\n          navigate('/dashboard');\n        } else {\n          setError(result.error || 'Registration failed');\n        }\n      }\n    } catch (err) {\n      console.error('Authentication error:', err);\n      setError((err as Error).message || 'An unexpected error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const useAdminEmail = () => {\n    setEmail('admin@example.com');\n    setPassword('password123');\n  };\n\n  const togglePasswordless = () => {\n    setShowPasswordless(!showPasswordless);\n    setShowSSO(false);\n  };\n\n  const toggleSSO = () => {\n    setShowSSO(!showSSO);\n    setShowPasswordless(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"auth-loading-wrapper\">\n        <LoadingSpinner message=\"Authenticating...\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"auth-page\">\n      <div className=\"auth-gradient-bg\"></div>\n      <div className=\"floating-shapes\">\n        <div className=\"shape shape-1\"></div>\n        <div className=\"shape shape-2\"></div>\n        <div className=\"shape shape-3\"></div>\n        <div className=\"shape shape-4\"></div>\n      </div>\n      \n      <div className=\"auth-container\">\n        <div className=\"auth-content\">\n          <div className=\"auth-header\">\n            <h1>Enterprise Authentication System</h1>\n            <div className=\"security-badge\">\n              <span>HIPAA COMPLIANT</span>\n            </div>\n          </div>\n          \n          <div className=\"auth-form-wrapper\">\n            {!showSSO && !showPasswordless ? (\n              <div className=\"auth-form-content\">\n                <h2 className=\"form-title\">{mode === 'login' ? 'Login' : 'Create Account'}</h2>\n                \n                {error && (\n                  <div className=\"error-notification\">\n                    <svg viewBox=\"0 0 24 24\" className=\"error-icon\">\n                      <path d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                    </svg>\n                    <span>{error}</span>\n                  </div>\n                )}\n                \n                <form onSubmit={handleSubmit} className=\"form\">\n                  <div className=\"input-group\">\n                    <input\n                      type=\"email\"\n                      id=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      className=\"form-input\"\n                      placeholder=\"Email\"\n                      required\n                    />\n                    <label htmlFor=\"email\" className=\"floating-label\">Email</label>\n                  </div>\n                  \n                  <div className=\"input-group\">\n                    <input\n                      type=\"password\"\n                      id=\"password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      className=\"form-input\"\n                      placeholder=\"Password\"\n                      required\n                    />\n                    <label htmlFor=\"password\" className=\"floating-label\">Password</label>\n                  </div>\n                  \n                  {mode === 'signup' && (\n                    <div className=\"input-group\">\n                      <input\n                        type=\"password\"\n                        id=\"confirm-password\"\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                        className=\"form-input\"\n                        placeholder=\"Confirm Password\"\n                        required\n                      />\n                      <label htmlFor=\"confirm-password\" className=\"floating-label\">Confirm Password</label>\n                    </div>\n                  )}\n                  \n                  <button type=\"submit\" className=\"submit-button\">\n                    {mode === 'login' ? 'Login' : 'Sign Up'}\n                  </button>\n                </form>\n                \n                <div className=\"form-actions\">\n                  <button \n                    className=\"toggle-mode-button\"\n                    onClick={toggleAuthMode}\n                  >\n                    {mode === 'login' ? 'Need an account? Sign up' : 'Already have an account? Login'}\n                  </button>\n                  \n                  <div className=\"alt-options\">\n                    <span>Or continue with</span>\n                    <div className=\"options-buttons\">\n                      <button \n                        className=\"alt-auth-button\"\n                        onClick={toggleSSO}\n                      >\n                        <svg viewBox=\"0 0 24 24\" className=\"button-icon\">\n                          <path d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"></path>\n                        </svg>\n                        <span>Single Sign-On</span>\n                      </button>\n                      <button \n                        className=\"alt-auth-button\"\n                        onClick={togglePasswordless}\n                      >\n                        <svg viewBox=\"0 0 24 24\" className=\"button-icon\">\n                          <path d=\"M12 11c0 3.517-1.009 6.799-2.753 9.571m-3.44-2.04l.054-.09A13.916 13.916 0 008 11a4 4 0 118 0c0 1.017-.07 2.019-.203 3m-2.118 6.844A21.88 21.88 0 0015.171 17m3.839 1.132c.645-2.266.99-4.659.99-7.132A8 8 0 008 4.07M3 15.364c.64-1.319 1-2.8 1-4.364 0-1.457.39-2.823 1.07-4\"></path>\n                        </svg>\n                        <span>Passwordless</span>\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <Link \n                    to=\"/password-recovery\"\n                    className=\"recovery-link\"\n                  >\n                    Forgot password?\n                  </Link>\n\n                  {showAdminLogin && (\n                    <button \n                      className=\"admin-login-button\"\n                      onClick={useAdminEmail}\n                    >\n                      Use admin account\n                    </button>\n                  )}\n                </div>\n              </div>\n            ) : showSSO ? (\n              <div className=\"alt-auth-content\">\n                <div className=\"alt-auth-header\">\n                  <h2>Single Sign-On</h2>\n                  <button \n                    onClick={() => setShowSSO(false)}\n                    className=\"close-button\"\n                  >\n                    <svg viewBox=\"0 0 24 24\">\n                      <path d=\"M6 18L18 6M6 6l12 12\"></path>\n                    </svg>\n                  </button>\n                </div>\n                <p className=\"alt-auth-desc\">\n                  Choose your organization's identity provider to sign in\n                </p>\n                <div className=\"sso-options-container\">\n                  <SSOProviders />\n                </div>\n                <button \n                  onClick={() => setShowSSO(false)}\n                  className=\"back-button\"\n                >\n                  Back to Login\n                </button>\n              </div>\n            ) : (\n              <div className=\"alt-auth-content\">\n                <div className=\"alt-auth-header\">\n                  <h2>Passwordless Login</h2>\n                  <button \n                    onClick={() => setShowPasswordless(false)}\n                    className=\"close-button\"\n                  >\n                    <svg viewBox=\"0 0 24 24\">\n                      <path d=\"M6 18L18 6M6 6l12 12\"></path>\n                    </svg>\n                  </button>\n                </div>\n                <p className=\"alt-auth-desc\">\n                  Enter your email to receive a magic link or code to login without a password.\n                </p>\n                <div className=\"alt-auth-form\">\n                  <div className=\"input-group\">\n                    <input\n                      type=\"email\"\n                      id=\"passwordless-email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      className=\"form-input\"\n                      placeholder=\"Email\"\n                    />\n                    <label htmlFor=\"passwordless-email\" className=\"floating-label\">Email</label>\n                  </div>\n                  <button \n                    className=\"submit-button\"\n                    onClick={() => alert('Passwordless login feature coming soon!')}\n                  >\n                    Send Magic Link\n                  </button>\n                  <button \n                    onClick={() => setShowPasswordless(false)}\n                    className=\"back-button\"\n                  >\n                    Back to Login\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"auth-features\">\n          <div className=\"feature-list\">\n            <div className=\"feature-item\">\n              <div className=\"feature-icon\">\n                <svg viewBox=\"0 0 24 24\">\n                  <path d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"></path>\n                </svg>\n              </div>\n              <div className=\"feature-text\">\n                <h3>Multi-factor Authentication</h3>\n                <p>Add an extra layer of security to your account</p>\n              </div>\n            </div>\n            <div className=\"feature-item\">\n              <div className=\"feature-icon\">\n                <svg viewBox=\"0 0 24 24\">\n                  <path d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"></path>\n                </svg>\n              </div>\n              <div className=\"feature-text\">\n                <h3>Single Sign-On</h3>\n                <p>Seamlessly connect with your existing accounts</p>\n              </div>\n            </div>\n            <div className=\"feature-item\">\n              <div className=\"feature-icon\">\n                <svg viewBox=\"0 0 24 24\">\n                  <path d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\"></path>\n                </svg>\n              </div>\n              <div className=\"feature-text\">\n                <h3>Advanced Security</h3>\n                <p>Enterprise-grade protection for your sensitive data</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"auth-footer\">\n        <div className=\"compliance-info\">\n          <span className=\"badge\">HIPAA COMPLIANT</span>\n          <span className=\"encryption-note\">End-to-end encryption</span>\n        </div>\n        <div className=\"copyright\">\n          Enterprise Authentication System © {new Date().getFullYear()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthFormSwitcher;","import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuthContext } from '../hooks/useAuthContext';\n\nconst Dashboard: React.FC = () => {\n  const { user, isAdmin } = useAuthContext();\n  const navigate = useNavigate();\n  \n  // Redirect admin users to admin dashboard\n  useEffect(() => {\n    if (isAdmin) {\n      navigate('/admin');\n    }\n  }, [isAdmin, navigate]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"card\" style={{ maxWidth: '800px', margin: '2rem auto' }}>\n        <h2 className=\"card-title\">Dashboard</h2>\n        \n        {user ? (\n          <div>\n            <p>Welcome, {user.email}!</p>\n            <p>You are logged in as: <strong>{isAdmin ? 'Administrator' : 'User'}</strong></p>\n            \n            <div style={{ marginTop: '2rem' }}>\n              <h3>Account Information</h3>\n              <p>Email: {user.email}</p>\n              <p>Role: {user.role || (isAdmin ? 'admin' : 'user')}</p>\n              <p>Account Created: {user.createdAt ? new Date(user.createdAt).toLocaleString() : 'Unknown'}</p>\n              <p>MFA Enabled: {user.mfaEnabled ? 'Yes' : 'No'}</p>\n            </div>\n          </div>\n        ) : (\n          <p>Please log in to view your dashboard.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard; ","export default function Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"container\">\n        <div className=\"encryption-indicator\">\n          HIPAA Compliant <span className=\"hipaa-badge\">Encrypted</span> - All data is encrypted and stored securely in your browser.\n        </div>\n        <p className=\"footer-text\">\n          This authentication system uses enterprise-level security practices including AES-256 encryption and secure password hashing.\n        </p>\n        <p className=\"footer-copyright\">\n          &copy; {new Date().getFullYear()} Enterprise Account Authentication - HIPAA-Compliant Security System | Made by Tyler Keesee\n        </p>\n      </div>\n    </footer>\n  );\n} ","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst ForgotPassword: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const auth = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email) {\n      setError('Please enter your email address');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const result = await auth.sendPasswordRecoveryEmail(email);\n      \n      if (result.success) {\n        setSuccessMessage(`Password reset instructions have been sent to ${email}. Please check your inbox.`);\n      } else {\n        setError(result.error || 'Failed to send password reset email');\n      }\n    } catch (err) {\n      console.error('Password reset error:', err);\n      setError('An unexpected error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"reset-password-container\">\n      <h2>Reset Your Password</h2>\n      \n      {successMessage ? (\n        <div className=\"reset-success\">\n          <div className=\"reset-success-icon\">✓</div>\n          <p>{successMessage}</p>\n          <button \n            className=\"primary-button\" \n            onClick={() => navigate('/login')}\n          >\n            Return to Login\n          </button>\n        </div>\n      ) : (\n        <>\n          <p>Enter your email address and we'll send you instructions to reset your password.</p>\n          \n          {error && <div className=\"error-message\">{error}</div>}\n          \n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email Address</label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={loading}\n                required\n              />\n            </div>\n            \n            <button \n              type=\"submit\" \n              className=\"primary-button\" \n              disabled={loading}\n            >\n              {loading ? 'Sending...' : 'Send Reset Instructions'}\n            </button>\n            \n            <button \n              type=\"button\" \n              className=\"text-button\" \n              onClick={() => navigate('/login')}\n              disabled={loading}\n            >\n              Back to Login\n            </button>\n          </form>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ForgotPassword; ","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuthContext } from '../hooks/useAuthContext';\n\nconst Header: React.FC = () => {\n  const { user, logout } = useAuthContext();\n\n  return (\n    <header className=\"header\">\n      <div className=\"container\">\n        <div className=\"flex-between\">\n          <h1>\n            <Link to=\"/\">Enterprise Authentication</Link>\n          </h1>\n          \n          <nav>\n            {user ? (\n              <div style={{ display: 'flex', gap: '1rem' }}>\n                <Link to=\"/dashboard\" className=\"link\">Dashboard</Link>\n                <button onClick={logout} className=\"link\">Logout</button>\n              </div>\n            ) : (\n              <Link to=\"/auth\" className=\"link\">Login</Link>\n            )}\n          </nav>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header; ","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound: React.FC = () => {\n  return (\n    <div className=\"container\" style={{ textAlign: 'center', padding: '2rem 0' }}>\n      <div className=\"card\">\n        <h1 style={{ fontSize: '3rem', fontWeight: 'bold', marginBottom: '1rem' }}>404</h1>\n        <h2 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>Page Not Found</h2>\n        <p style={{ marginBottom: '2rem' }}>The page you are looking for doesn't exist or has been moved.</p>\n        <Link \n          to=\"/\" \n          className=\"btn btn-primary\"\n        >\n          Go Home\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound; ","import React, { useEffect, useState } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuthContext } from '../hooks/useAuthContext';\nimport LoadingSpinner from './LoadingSpinner';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requireAdmin?: boolean;\n}\n\n/**\n * ProtectedRoute component that controls access to routes based on authentication\n * and optional admin privileges\n */\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \n  children, \n  requireAdmin = false \n}) => {\n  const { user, isAdmin, loading: authLoading } = useAuthContext();\n  const [isLoading, setIsLoading] = useState(true);\n  const location = useLocation();\n  \n  useEffect(() => {\n    // Only show loading for a brief moment to avoid flashing\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 300);\n    \n    return () => clearTimeout(timer);\n  }, []);\n\n  // Show loading indicator while authentication state is being determined\n  if (isLoading || authLoading) {\n    return (\n      <div className=\"loading-container\" style={{ \n        height: '70vh', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center',\n        flexDirection: 'column'\n      }}>\n        <LoadingSpinner message=\"Checking authentication...\" />\n        <p style={{ marginTop: '15px', color: '#666' }}>\n          Verifying your credentials...\n        </p>\n      </div>\n    );\n  }\n\n  // Redirect to auth page if not authenticated\n  if (!user) {\n    console.log('Protected route: No user found, redirecting to auth page');\n    // Save the current location to redirect back after login\n    return <Navigate to=\"/auth\" state={{ from: location }} replace />;\n  }\n\n  // Redirect if admin access is required but the user is not an admin\n  if (requireAdmin && !isAdmin) {\n    console.warn('Admin access required but user is not an admin - redirecting to dashboard');\n    return <Navigate to=\"/dashboard\" replace />;\n  }\n\n  // Render the protected content\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute; ","import React, { useEffect } from 'react';\nimport { Navigate, Route, BrowserRouter as Router, Routes } from 'react-router-dom';\nimport AdminDashboard from './components/AdminDashboard';\nimport AuthFormSwitcher from './components/AuthFormSwitcher';\nimport Dashboard from './components/Dashboard';\nimport Footer from './components/Footer';\nimport ForgotPassword from './components/ForgotPassword';\nimport Header from './components/Header';\nimport NotFound from './components/NotFound';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport { useAuth } from './contexts/AuthContext';\nimport './styles.css';\n\n// For debugging loading issues\nconsole.log('App component loaded');\n\nconst App: React.FC = () => {\n  const { user, isAdmin } = useAuth();\n  \n  useEffect(() => {\n    console.log('App component mounted');\n    console.log('Auth state:', { isAuthenticated: !!user, isAdmin });\n  }, [user, isAdmin]);\n  \n  return (\n    <Router basename=\"/Enterprise-Authentication-System\">\n      <div className=\"app\">\n        <Header />\n        \n        <main className=\"main-content\">\n          <Routes>\n            {/* Home route - redirect to auth if not logged in, dashboard if logged in */}\n            <Route \n              path=\"/\" \n              element={\n                user ? (\n                  <Navigate to=\"/dashboard\" />\n                ) : (\n                  <Navigate to=\"/auth\" />\n                )\n              } \n            />\n            \n            {/* Auth route */}\n            <Route \n              path=\"/auth\" \n              element={user ? <Navigate to=\"/dashboard\" /> : <AuthFormSwitcher />} \n            />\n\n            {/* Login route - alias for auth */}\n            <Route \n              path=\"/login\" \n              element={user ? <Navigate to=\"/dashboard\" /> : <AuthFormSwitcher initialMode=\"login\" />} \n            />\n            \n            {/* Signup route */}\n            <Route \n              path=\"/signup\" \n              element={user ? <Navigate to=\"/dashboard\" /> : <AuthFormSwitcher initialMode=\"signup\" />} \n            />\n            \n            {/* Password recovery */}\n            <Route\n              path=\"/forgot-password\"\n              element={<ForgotPassword />}\n            />\n            \n            {/* Dashboard route - protected */}\n            <Route \n              path=\"/dashboard\" \n              element={\n                <ProtectedRoute>\n                  <Dashboard />\n                </ProtectedRoute>\n              } \n            />\n            \n            {/* Admin dashboard route - protected and requires admin */}\n            <Route \n              path=\"/admin\" \n              element={\n                <ProtectedRoute requireAdmin={true}>\n                  <AdminDashboard />\n                </ProtectedRoute>\n              } \n            />\n            \n            {/* Not found route */}\n            <Route path=\"*\" element={<NotFound />} />\n          </Routes>\n        </main>\n        \n        <Footer />\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","\n// Direct module implementation to avoid circular references\n'use strict';\nfunction defineGlobalProperty(name, value) {\n  try {\n    if (typeof global !== 'undefined') {\n      if (Object.defineProperty) {\n        Object.defineProperty(global, name, { configurable: true, writable: true, value: value });\n      } else {\n        global[name] = value;\n      }\n    }\n    if (typeof window !== 'undefined') {\n      if (Object.defineProperty) {\n        Object.defineProperty(window, name, { configurable: true, writable: true, value: value });\n      } else {\n        window[name] = value;\n      }\n    }\n    return true;\n  } catch (error) {\n    console.warn('Failed to define global property:', name, error);\n    return false;\n  }\n}\n// Export the function using multiple module formats\nexport default defineGlobalProperty;\nif (typeof module !== 'undefined') {\n  module.exports = defineGlobalProperty;\n}\n","// Add module declaration\n/// <reference types=\"node\" />\n\n// Import polyfills correctly - ensure they're loaded first\nimport 'buffer'; // Import the module first\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './App.css';\nimport { AuthProvider } from './contexts/AuthContext';\nimport './index.css'; // Tailwind CSS\nimport './styles.css';\n\n// Import the global property define function\n// Use direct relative path with .js extension to help bundlers\n// This is handled specially by Rollup to avoid circular references\nimport defineGlobalProperty from './internals/define-globalThis-property.js';\n\n// Make sure globalThis is properly defined\ndefineGlobalProperty('globalThis', typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);\n\nconsole.log('Enterprise Authentication System starting...');\n\n// Set up error tracking to debug blank screen issues\nlet hasRendered = false;\n\n// Set up polyfills and environment globals early\n(function setupPolyfills() {\n  try {\n    // Define global property for process\n    defineGlobalProperty('process', { env: { NODE_ENV: import.meta.env.MODE || 'production' } });\n    \n    // Define global property for buffer if needed\n    if (typeof window !== 'undefined' && !window.Buffer) {\n      defineGlobalProperty('Buffer', {});\n    }\n\n    console.log('Polyfills and global properties initialized');\n  } catch (err) {\n    console.error('Error setting up polyfills:', err);\n  }\n})();\n\n// Add detailed error handling for uncaught errors\nwindow.addEventListener('error', (event) => {\n  console.error('Uncaught error:', event.error);\n  // Log stack trace for better debugging\n  if (event.error && event.error.stack) {\n    console.error('Error stack:', event.error.stack);\n  }\n  \n  // Check if we failed to render\n  if (!hasRendered) {\n    const rootElement = document.getElementById('root');\n    if (rootElement) {\n      rootElement.innerHTML = `\n        <div style=\"padding: 20px; font-family: sans-serif;\">\n          <h2 style=\"color: #d32f2f;\">Error Loading Application</h2>\n          <p>The application encountered an error during initialization.</p>\n          <p>Please check the console for more details or try refreshing the page.</p>\n          <button onclick=\"window.location.reload()\" style=\"padding: 8px 16px; background: #4285f4; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Refresh Page\n          </button>\n        </div>\n      `;\n    }\n  }\n  \n  // Prevent app from crashing completely\n  event.preventDefault();\n});\n\n// Performance monitoring\nconst logPerformanceMetrics = () => {\n  // Wait for page to be fully loaded\n  setTimeout(() => {\n    const navigationTiming = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    if (navigationTiming) {\n      console.log('⚡️ Performance metrics:');\n      console.log(`- DOM Content Loaded: ${Math.round(navigationTiming.domContentLoadedEventEnd - navigationTiming.startTime)}ms`);\n      console.log(`- First Paint: ${Math.round(performance.getEntriesByName('first-paint')[0]?.startTime || 0)}ms`);\n      console.log(`- Time to Interactive: ${Math.round(navigationTiming.domInteractive - navigationTiming.startTime)}ms`);\n      console.log(`- Total Load Time: ${Math.round(navigationTiming.loadEventEnd - navigationTiming.startTime)}ms`);\n    }\n  }, 0);\n};\n\n// Initialize optimizations\nconst preconnectUrls = [\n  'https://fonts.googleapis.com',\n  'https://fonts.gstatic.com'\n];\n\npreconnectUrls.forEach(url => {\n  const link = document.createElement('link');\n  link.rel = 'preconnect';\n  link.href = url;\n  link.crossOrigin = 'anonymous';\n  document.head.appendChild(link);\n});\n\n// Simple reportWebVitals function\nconst reportWebVitals = (onPerfEntry?: (metric: any) => void) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    }).catch(err => {\n      console.error('Error loading web-vitals:', err);\n    });\n  }\n};\n\n// Enhanced function to remove loading screen with smooth transition\nfunction removeLoadingScreen() {\n  console.log('Removing loading screen');\n  \n  const rootLoading = document.getElementById('root-loading');\n  if (rootLoading) {\n    console.log('Found root-loading element, removing...');\n    rootLoading.style.opacity = '0';\n    rootLoading.style.transition = 'opacity 0.5s ease';\n    \n    setTimeout(() => {\n      if (rootLoading.parentNode) {\n        rootLoading.parentNode.removeChild(rootLoading);\n        console.log('Root loading screen removed from DOM');\n      }\n    }, 500);\n  } else {\n    console.warn('No loading screen element found with ID \"root-loading\"');\n  }\n}\n\n// Initialize application\nfunction initApp() {\n  try {\n    // Find the root element\n    const rootElement = document.getElementById('root');\n\n    if (!rootElement) {\n      console.error('Root element not found in DOM!');\n      return;\n    }\n    \n    console.log('Root element found, rendering application...');\n    \n    // Use createRoot for React 18\n    const root = createRoot(rootElement);\n    \n    // Render the app with error boundaries\n    root.render(\n      <StrictMode>\n        <AuthProvider>\n          <App />\n        </AuthProvider>\n      </StrictMode>\n    );\n    \n    console.log('React render completed!');\n    hasRendered = true;\n    \n    // Start monitoring performance\n    logPerformanceMetrics();\n    \n    // Success! Remove loading screen after render completes\n    removeLoadingScreen();\n  } catch (error) {\n    console.error('Fatal error rendering application:', error);\n    \n    // Still try to remove loading screen even on error\n    removeLoadingScreen();\n    \n    // Show error message in root element\n    const rootElement = document.getElementById('root');\n    if (rootElement) {\n      rootElement.innerHTML = `\n        <div style=\"padding: 20px; font-family: sans-serif;\">\n          <h2 style=\"color: #d32f2f;\">Application Error</h2>\n          <p>Sorry, the application failed to initialize correctly.</p>\n          <p>Please try refreshing the page or contact support if the issue persists.</p>\n          <button onclick=\"window.location.reload()\" style=\"padding: 8px 16px; background: #4285f4; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Refresh Page\n          </button>\n        </div>\n      `;\n    }\n  }\n}\n\n// Initialize the application\nconsole.log('Calling initApp()...');\ninitApp();\n\n// Extra fallback to ensure loading screen gets removed\nsetTimeout(() => {\n  if (!hasRendered) {\n    console.warn('Application may not have rendered correctly, forcing removal of loading screen');\n    removeLoadingScreen();\n  }\n}, 5000);\n"],"file":"assets/index-3b0ecdcf.js"}